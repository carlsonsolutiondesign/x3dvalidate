{ "X3D": {
    "encoding":"UTF-8",
    "@profile":"Immersive",
    "@version":"3.3",
    "@xsd:noNamespaceSchemaLocation":"http://www.web3d.org/specifications/x3d-3.3.xsd",
    "JSON schema":"http://www.web3d.org/specifications/x3d-3.3-JSONSchema.json",
    "head": {
        "meta": [
          {
            "@name":"title",
            "@content":"BeamCylinderPrototype.x3d"
          },
          {
            "@name":"creator",
            "@content":"Don Brutzman"
          },
          {
            "@name":"created",
            "@content":"25 February 2001"
          },
          {
            "@name":"modified",
            "@content":"26 December 2014"
          },
          {
            "@name":"description",
            "@content":"Produce wireframe or transparent beam cylinders."
          },
          {
            "@name":"identifier",
            "@content":"https://savage.nps.edu/Savage/CommunicationsAndSensors/Beam/BeamCylinderPrototype.x3d"
          },
          {
            "@name":"generator",
            "@content":"X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
          },
          {
            "@name":"license",
            "@content":"../../license.html"
          },
          {
            "@name":"translated",
            "@content":"19 March 2017"
          },
          {
            "@name":"generator",
            "@content":"X3dToJson.xslt, http://www.web3d.org/x3d/stylesheets/X3dToJson.html"
          },
          {
            "@name":"warning",
            "@content":"An experimental version of X3D JSON encoding is used for this scene.  Status online at http://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
          }
        ]
    },
    "Scene": {
        "-children":[
          { "NavigationInfo":
            {
              "@DEF":"LockedDownInterface2D",
              "@type":["NONE"]
            }
          },
          { "Background":
            {
              "@skyColor":[0,0.3,0.5]
            }
          },
          { "WorldInfo":
            {
              "@info":["Produce wireframe or transparent beam cylinders."],
              "@title":"BeamCylinderProto"
            }
          },
          { "Viewpoint":
            {
              "@description":"Beam Cylinder",
              "@position":[0,0,15]
            }
          },
          { "ProtoDeclare":
            {
              "@name":"BeamCylinder",
              "@appinfo":"Produce wireframe or transparent beam cylinders. Typical uses include propeller/thruster water flow or line-of-sight sonar/radar/light beams. Negative range values invert base and apex at same relative location. Default: beam with apex at (0 0 0) and base of radius 1 in x-z plane at (1 0 0).",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"name",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Assigning a name to a BeamCylinder aids tracing",
                      "@type":"SFString",
                      "@value":"(unnamed)"
                    },
                    {
                      "@name":"contact",
                      "@accessType":"inputOnly",
                      "@appinfo":"(communications) is transmitted signal in contact with receiver or (sensor) is a target return detected?",
                      "@type":"SFBool"
                    },
                    {
                      "@name":"range",
                      "@accessType":"inputOnly",
                      "@appinfo":"distance in meters along x axis",
                      "@type":"SFFloat"
                    },
                    {
                      "@name":"defaultRange",
                      "@accessType":"initializeOnly",
                      "@appinfo":"distance in meters used until eventIn range sent",
                      "@type":"SFFloat",
                      "@value":1
                    },
                    {
                      "@name":"wireframe",
                      "@accessType":"initializeOnly",
                      "@appinfo":"whether wireframe beam is drawn",
                      "@type":"SFBool",
                      "@value":true
                    },
                    {
                      "@name":"solid",
                      "@accessType":"initializeOnly",
                      "@appinfo":"whether solid beam is drawn",
                      "@type":"SFBool",
                      "@value":true
                    },
                    {
                      "@name":"beamHeight",
                      "@accessType":"initializeOnly",
                      "@appinfo":"meters across vertical y axis",
                      "@type":"SFFloat",
                      "@value":1
                    },
                    {
                      "@name":"beamWidth",
                      "@accessType":"initializeOnly",
                      "@appinfo":"meters across horizontal z axis",
                      "@type":"SFFloat",
                      "@value":1
                    },
                    {
                      "@name":"contactColor",
                      "@accessType":"initializeOnly",
                      "@appinfo":"rendering color when contact=true",
                      "@type":"SFColor",
                      "@value":[0.8,0.1,0.1]
                    },
                    {
                      "@name":"noContactColor",
                      "@accessType":"initializeOnly",
                      "@appinfo":"rendering color when contact=false",
                      "@type":"SFColor",
                      "@value":[0.3,0.5,0.5]
                    },
                    {
                      "@name":"transparency",
                      "@accessType":"inputOutput",
                      "@appinfo":"1 = fully transparent wireframe only",
                      "@type":"SFFloat",
                      "@value":0
                    }
                  ],
                  "-children":[
                    {
                      "#comment":"BEAM_CONTROL beam scaling is controlled by range/beamHeightDegrees/beamWidthDegrees/direction inputs"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Transform":
                      {
                        "@DEF":"BEAM_CONTROL",
                        "-children":[
                          { "Switch":
                            {
                              "@DEF":"WIREFRAME_SWITCH",
                              "@whichChoice":0,
                              "-children":[
                                { "WorldInfo":
                                  {
                                    "@info":["initial choice is null node (WorldInfo), meaning no wireframe beam"]
                                  }
                                },
                                { "Shape":
                                  {
                                    "-appearance":
                                      { "Appearance":
                                        {
                                          "-material":
                                            { "Material":
                                              {
                                                "@DEF":"WIRE_COLOR",
                                                "@diffuseColor":[0.1,0.1,0.1],
                                                "IS": {
                                                    "connect": [
                                                      {
                                                        "@nodeField":"transparency",
                                                        "@protoField":"transparency"
                                                      }
                                                    ]
                                                }
                                              }
                                            }
                                        }
                                      },
                                    "-geometry":
                                      { "IndexedLineSet":
                                        {
                                          "@coordIndex":[0,13,-1,1,14,-1,2,15,-1,3,16,-1,4,17,-1,5,18,-1,6,19,-1,7,20,-1,8,21,-1,9,22,-1,10,23,-1,11,24,-1,12,25,-1,13,14,15,16,17,18,19,20,21,22,23,24,13,-1,0,1,2,3,4,5,6,7,8,9,10,11,0,-1],
                                          "-coord":
                                            { "Coordinate":
                                              {
                                                "@point":[0,1,0,0,0.86,0.50,0,0.50,0.86,0,0,1.0,0,-0.50,0.86,0,-0.86,0.50,0,-1,0,0,-0.86,-0.50,0,-0.50,-0.86,0,0,-1.0,0,0.50,-0.86,0,0.86,-0.50,0,0,0,1,1,0,1,0.86,0.50,1,0.50,0.86,1,0,1.0,1,-0.50,0.86,1,-0.86,0.50,1,-1,0,1,-0.86,-0.50,1,-0.50,-0.86,1,0,-1.0,1,0.50,-0.86,1,0.86,-0.50,1,0,0]
                                              }
                                            }
                                        }
                                      }
                                  }
                                }
                              ]
                            }
                          },
                          { "Switch":
                            {
                              "@DEF":"SOLID_SWITCH",
                              "@whichChoice":0,
                              "-children":[
                                { "WorldInfo":
                                  {
                                    "@info":["initial choice is null node (WorldInfo), meaning no solid beam"]
                                  }
                                },
                                { "Transform":
                                  {
                                    "@rotation":[0,0,1,1.57079],
                                    "@translation":[0.5,0,0],
                                    "-children":[
                                      { "Shape":
                                        {
                                          "-appearance":
                                            { "Appearance":
                                              {
                                                "-material":
                                                  { "Material":
                                                    {
                                                      "@DEF":"CYLINDER_COLOR",
                                                      "@diffuseColor":[0.1,0.1,0.1],
                                                      "IS": {
                                                          "connect": [
                                                            {
                                                              "@nodeField":"transparency",
                                                              "@protoField":"transparency"
                                                            }
                                                          ]
                                                      }
                                                    }
                                                  }
                                              }
                                            },
                                          "-children":[
                                            {
                                              "#comment":"solid='false' is harder to recognize properly, use default solid='true'"
                                            }
                                          ],
                                          "-geometry":
                                            { "Cylinder":
                                              {
                                                "@height":1
                                              }
                                            }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "#comment":"Non-rendered animation controls"
                    },
                    { "Script":
                      {
                        "@DEF":"DETECTION",
                        "field": [
                          {
                            "@name":"name",
                            "@accessType":"initializeOnly",
                            "@type":"SFString"
                          },
                          {
                            "@name":"contact",
                            "@accessType":"inputOnly",
                            "@type":"SFBool"
                          },
                          {
                            "@name":"wireframe",
                            "@accessType":"initializeOnly",
                            "@type":"SFBool"
                          },
                          {
                            "@name":"solid",
                            "@accessType":"initializeOnly",
                            "@type":"SFBool"
                          },
                          {
                            "@name":"contactColor",
                            "@accessType":"initializeOnly",
                            "@type":"SFColor"
                          },
                          {
                            "@name":"noContactColor",
                            "@accessType":"initializeOnly",
                            "@type":"SFColor"
                          },
                          {
                            "@name":"beamColor",
                            "@accessType":"outputOnly",
                            "@type":"SFColor"
                          },
                          {
                            "@name":"wireframeChoice",
                            "@accessType":"outputOnly",
                            "@type":"SFInt32"
                          },
                          {
                            "@name":"solidChoice",
                            "@accessType":"outputOnly",
                            "@type":"SFInt32"
                          },
                          {
                            "@name":"traceEnabled",
                            "@accessType":"initializeOnly",
                            "@appinfo":"internal flag to turn on Script tracing",
                            "@type":"SFBool",
                            "@value":true
                          }
                        ],
                        "IS": {
                            "connect": [
                              {
                                "@nodeField":"name",
                                "@protoField":"name"
                              },
                              {
                                "@nodeField":"contact",
                                "@protoField":"contact"
                              },
                              {
                                "@nodeField":"wireframe",
                                "@protoField":"wireframe"
                              },
                              {
                                "@nodeField":"solid",
                                "@protoField":"solid"
                              },
                              {
                                "@nodeField":"contactColor",
                                "@protoField":"contactColor"
                              },
                              {
                                "@nodeField":"noContactColor",
                                "@protoField":"noContactColor"
                              }
                            ]
                        },
                        "#sourceText":[
"ecmascript:",
"function initialize ()",
"{",
"\tbeamColor = noContactColor;",
"\tif (wireframe == true) wireframeChoice = 1;",
"\tif (solid     == true) solidChoice     = 1;",
"\tif (traceEnabled)",
"\t{",
"//\tBrowser.print ('[BeamCylinder.DETECTION ' + name + '] trace=' + trace + '\n');",
"\tBrowser.print ('[BeamCylinder.DETECTION ' + name + '] wireframeChoice=' + wireframeChoice + ', solidChoice=' + solidChoice + '\n');",
"\tBrowser.print ('[BeamCylinder.DETECTION ' + name + '] contactColor=' + contactColor.toString() + ', noContactColor=' + noContactColor.toString() + '\n');",
"\t}",
"}",
"function contact (newDetect, timeStamp)",
"{",
"\tif (newDetect) beamColor = contactColor;",
"\telse           beamColor = noContactColor;",
"\tif (traceEnabled) Browser.print ('[BeamCylinder.DETECTION ' + name + '] contact=' + newDetect + ', beamColor=' + beamColor.toString() + '\n');",
"}"
]
                      }
                    },
                    { "Script":
                      {
                        "@DEF":"BEAM_CALCULATE",
                        "field": [
                          {
                            "@name":"name",
                            "@accessType":"initializeOnly",
                            "@type":"SFString"
                          },
                          {
                            "@name":"range",
                            "@accessType":"inputOnly",
                            "@type":"SFFloat"
                          },
                          {
                            "@name":"defaultRange",
                            "@accessType":"initializeOnly",
                            "@type":"SFFloat"
                          },
                          {
                            "@name":"beamHeight",
                            "@accessType":"initializeOnly",
                            "@type":"SFFloat"
                          },
                          {
                            "@name":"beamWidth",
                            "@accessType":"initializeOnly",
                            "@type":"SFFloat"
                          },
                          {
                            "@name":"beamScale",
                            "@accessType":"outputOnly",
                            "@type":"SFVec3f"
                          },
                          {
                            "@name":"direction",
                            "@accessType":"outputOnly",
                            "@type":"SFRotation"
                          },
                          {
                            "@name":"reverseOffset",
                            "@accessType":"outputOnly",
                            "@type":"SFVec3f"
                          },
                          {
                            "@name":"traceEnabled",
                            "@accessType":"initializeOnly",
                            "@appinfo":"internal flag to turn on Script tracing",
                            "@type":"SFBool",
                            "@value":true
                          }
                        ],
                        "IS": {
                            "connect": [
                              {
                                "@nodeField":"name",
                                "@protoField":"name"
                              },
                              {
                                "@nodeField":"range",
                                "@protoField":"range"
                              },
                              {
                                "@nodeField":"defaultRange",
                                "@protoField":"defaultRange"
                              },
                              {
                                "@nodeField":"beamHeight",
                                "@protoField":"beamHeight"
                              },
                              {
                                "@nodeField":"beamWidth",
                                "@protoField":"beamWidth"
                              }
                            ]
                        },
                        "#sourceText":[
"ecmascript:",
"function initialize () {",
" // Note that VRML scale factor triplets all equal to zero are not allowed",
" if (defaultRange == 0) defaultRange = .0001;",
" if (beamHeight   == 0) beamHeight = .0001;",
" if (beamWidth    == 0) beamWidth  = .0001;",
" beamScale = new SFVec3f ( defaultRange, beamHeight, beamWidth);",
"}",
"function range (newRange, timeStamp) {",
" if (newRange < 0)",
" {",
"   direction     = new SFRotation (0, 1, 0, 3.141592653);",
"   reverseOffset = new SFVec3f (- newRange, 0, 0);",
"   beamScale = new SFVec3f (-newRange, beamHeight, beamWidth);",
" }",
" else if (newRange == 0)",
" {",
"   direction     = new SFRotation (0, 1, 0, 0);",
"   reverseOffset = new SFVec3f (0, 0, 0);",
"   beamScale = new SFVec3f ( .0001, .0001, .0001 );  // zero scale is illegal",
" }",
" else",
" {",
"   direction     = new SFRotation (0, 1, 0, 0);",
"   reverseOffset = new SFVec3f (0, 0, 0);",
"   beamScale = new SFVec3f (newRange, beamHeight, beamWidth);",
" }",
" if (traceEnabled)",
" {",
"//\tBrowser.print ('[BeamCylinder.BEAM_CALCULATE ' + name + '] trace=' + trace + '\n');",
"\tBrowser.print ('[BeamCylinder.BEAM_CALCULATE ' + name + '] newRange=' + newRange + ', direction=' + direction.toString() + '\n');",
"\tBrowser.print ('[BeamCylinder.BEAM_CALCULATE ' + name + '] reverseOffset=' + reverseOffset.toString() + ', beamScale=' + beamScale.toString() + '\n');",
" }",
"}"
]
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromField":"beamColor",
                        "@fromNode":"DETECTION",
                        "@toField":"emissiveColor",
                        "@toNode":"WIRE_COLOR"
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromField":"beamColor",
                        "@fromNode":"DETECTION",
                        "@toField":"emissiveColor",
                        "@toNode":"CYLINDER_COLOR"
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromField":"wireframeChoice",
                        "@fromNode":"DETECTION",
                        "@toField":"whichChoice",
                        "@toNode":"WIREFRAME_SWITCH"
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromField":"solidChoice",
                        "@fromNode":"DETECTION",
                        "@toField":"whichChoice",
                        "@toNode":"SOLID_SWITCH"
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromField":"beamScale",
                        "@fromNode":"BEAM_CALCULATE",
                        "@toField":"scale",
                        "@toNode":"BEAM_CONTROL"
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromField":"direction",
                        "@fromNode":"BEAM_CALCULATE",
                        "@toField":"rotation",
                        "@toNode":"BEAM_CONTROL"
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromField":"reverseOffset",
                        "@fromNode":"BEAM_CALCULATE",
                        "@toField":"translation",
                        "@toNode":"BEAM_CONTROL"
                      }
                    }
                  ]
              }
            }
          },
          {
            "#comment":"Viewable geometry for this scene is anchored text that links to an example showing ExternProtoDeclare usage of BeamCylinder"
          },
          { "Anchor":
            {
              "@description":"Beam Cylinder Example",
              "@url":["BeamCylinderExample.x3d","https://savage.nps.edu/Savage/CommunicationsAndSensors/Beam/BeamCylinderExample.x3d","BeamCylinderExample.wrl","https://savage.nps.edu/Savage/CommunicationsAndSensors/Beam/BeamCylinderExample.wrl"],
              "-children":[
                { "Shape":
                  {
                    "-appearance":
                      { "Appearance":
                        {
                          "-material":
                            { "Material":
                              {
                                "@diffuseColor":[0,1,1],
                                "@emissiveColor":[0,1,1]
                              }
                            }
                        }
                      },
                    "-geometry":
                      { "Text":
                        {
                          "@string":["BeamCylinderPrototype","is a Prototype definition file.","","To see an example scene","click this text and view","BeamCylinderExample."],
                          "-fontStyle":
                            { "FontStyle":
                              {
                                "@justify":["MIDDLE","MIDDLE"]
                              }
                            }
                        }
                      }
                  }
                },
                { "Shape":
                  {
                    "-children":[
                      {
                        "#comment":"transparent Box as text-selection assist"
                      }
                    ],
                    "-geometry":
                      { "Box":
                        {
                          "@size":[11,6,0.001]
                        }
                      },
                    "-appearance":
                      { "Appearance":
                        {
                          "-material":
                            { "Material":
                              {
                                "@transparency":1
                              }
                            }
                        }
                      }
                  }
                }
              ]
            }
          }
        ]
    }
  }
}