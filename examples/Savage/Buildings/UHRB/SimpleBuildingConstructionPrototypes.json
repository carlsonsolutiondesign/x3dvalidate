{ "X3D": {
    "encoding":"UTF-8",
    "@profile":"Immersive",
    "@version":"3.0",
    "@xsd:noNamespaceSchemaLocation":"http://www.web3d.org/specifications/x3d-3.0.xsd",
    "JSON schema":"http://www.web3d.org/specifications/x3d-3.3-JSONSchema.json",
    "head": {
        "meta": [
          {
            "@name":"title",
            "@content":"SimpleBuildingConstructionPrototypes.x3d"
          },
          {
            "@name":"creator",
            "@content":"Don Brutzman"
          },
          {
            "@name":"created",
            "@content":"17 October 2001"
          },
          {
            "@name":"modified",
            "@content":"12 January 2014"
          },
          {
            "@name":"description",
            "@content":"Prototypes for simple building construction: Floor, Wall, Level and Building."
          },
          {
            "@name":"identifier",
            "@content":"https://savage.nps.edu/Savage/Buildings/UHRB/SimpleBuildingConstructionPrototypes.x3d"
          },
          {
            "@name":"generator",
            "@content":"X3D-Edit 3.2, https://savage.nps.edu/X3D-Edit"
          },
          {
            "@name":"license",
            "@content":"../../license.html"
          },
          {
            "@name":"translated",
            "@content":"19 March 2017"
          },
          {
            "@name":"generator",
            "@content":"X3dToJson.xslt, http://www.web3d.org/x3d/stylesheets/X3dToJson.html"
          },
          {
            "@name":"warning",
            "@content":"An experimental version of X3D JSON encoding is used for this scene.  Status online at http://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
          }
        ]
    },
    "Scene": {
        "-children":[
          { "ProtoDeclare":
            {
              "@name":"Floor",
              "@appinfo":"Each Floor cantains the current floor surface plus a ceiling surface for the floor immediately underneath. A Floor does not include exterior or interior wall polygons.",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"name",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Identifying name for this Floor.",
                      "@type":"SFString"
                    },
                    {
                      "@name":"description",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Description info for this construction.",
                      "@type":"MFString"
                    },
                    {
                      "@name":"size",
                      "@accessType":"initializeOnly",
                      "@appinfo":"single-value Coordinate node with dimension x=width y=height z=depth in meters",
                      "@type":"SFNode",
                      "-children":[
                        { "Coordinate":
                          {
                          }
                        }
                      ]
                    },
                    {
                      "@name":"floorAppearance",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Appearance node with Material colors ImageTexture etc. for this construction.",
                      "@type":"SFNode",
                      "-children":[
                        { "Appearance":
                          {
                            "@DEF":"DefaultFloorAppearance",
                            "-material":
                              { "Material":
                                {
                                  "@diffuseColor":[0.2,0.2,0.2]
                                }
                              }
                          }
                        }
                      ]
                    },
                    {
                      "@name":"ceilingAppearance",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Appearance node with Material colors ImageTexture etc. for this construction.",
                      "@type":"SFNode",
                      "-children":[
                        { "Appearance":
                          {
                            "@DEF":"DefaultCeilingAppearance",
                            "-material":
                              { "Material":
                                {
                                }
                              }
                          }
                        }
                      ]
                    },
                    {
                      "@name":"showSides",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Whether sides are visible.",
                      "@type":"SFBool",
                      "@value":false
                    },
                    {
                      "@name":"width",
                      "@accessType":"outputOnly",
                      "@appinfo":"width of front side of floor aligned with local X axis.",
                      "@type":"SFFloat"
                    },
                    {
                      "@name":"height",
                      "@accessType":"outputOnly",
                      "@appinfo":"height of vertical distance between floor and ceiling directly underneath aligned with local Y axis.",
                      "@type":"SFFloat"
                    },
                    {
                      "@name":"depth",
                      "@accessType":"outputOnly",
                      "@appinfo":"depth of horizontal side of floor aligned with local -Z axis.",
                      "@type":"SFFloat"
                    },
                    {
                      "@name":"built",
                      "@accessType":"outputOnly",
                      "@appinfo":"Indicate whether initialization complete.",
                      "@type":"SFBool"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Group":
                      {
                        "@DEF":"FloorRoot",
                        "-children":[
                          { "Transform":
                            {
                              "@DEF":"LowerLeftOutsideCornerLocation",
                              "-children":[
                                { "Shape":
                                  {
                                    "@DEF":"Floor",
                                    "IS": {
                                        "connect": [
                                          {
                                            "@nodeField":"appearance",
                                            "@protoField":"floorAppearance"
                                          }
                                        ]
                                    },
                                    "-geometry":
                                      { "IndexedFaceSet":
                                        {
                                          "@coordIndex":[0,1,2,3,0,-1],
                                          "-coord":
                                            { "Coordinate":
                                              {
                                                "@DEF":"FloorCoordinate"
                                              }
                                            }
                                        }
                                      }
                                  }
                                },
                                { "Shape":
                                  {
                                    "@DEF":"Ceiling",
                                    "IS": {
                                        "connect": [
                                          {
                                            "@nodeField":"appearance",
                                            "@protoField":"ceilingAppearance"
                                          }
                                        ]
                                    },
                                    "-geometry":
                                      { "IndexedFaceSet":
                                        {
                                          "@coordIndex":[4,7,6,5,4,-1],
                                          "-coord":
                                            { "Coordinate":
                                              {
                                                "@USE":"FloorCoordinate"
                                              }
                                            }
                                        }
                                      }
                                  }
                                },
                                { "Switch":
                                  {
                                    "@DEF":"FloorSidesSwitch",
                                    "@whichChoice":-1,
                                    "-children":[
                                      { "Shape":
                                        {
                                          "@DEF":"FloorSides",
                                          "IS": {
                                              "connect": [
                                                {
                                                  "@nodeField":"appearance",
                                                  "@protoField":"floorAppearance"
                                                }
                                              ]
                                          },
                                          "-geometry":
                                            { "IndexedFaceSet":
                                              {
                                                "@coordIndex":[0,3,7,4,-1,3,2,6,7,-1,1,5,6,2,-1,0,4,5,1,-1],
                                                "@solid":false,
                                                "-coord":
                                                  { "Coordinate":
                                                    {
                                                      "@USE":"FloorCoordinate"
                                                    }
                                                  }
                                              }
                                            }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          { "Script":
                            {
                              "@DEF":"FloorConstructionScript",
                              "@directOutput":true,
                              "field": [
                                {
                                  "@name":"name",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFString"
                                },
                                {
                                  "@name":"description",
                                  "@accessType":"initializeOnly",
                                  "@type":"MFString"
                                },
                                {
                                  "@name":"size",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFNode"
                                },
                                {
                                  "@name":"showSides",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFBool"
                                },
                                {
                                  "@name":"wallsVisible",
                                  "@accessType":"outputOnly",
                                  "@type":"SFInt32"
                                },
                                {
                                  "@name":"floorPoints",
                                  "@accessType":"outputOnly",
                                  "@type":"MFVec3f"
                                },
                                {
                                  "@name":"width",
                                  "@accessType":"outputOnly",
                                  "@type":"SFFloat"
                                },
                                {
                                  "@name":"height",
                                  "@accessType":"outputOnly",
                                  "@type":"SFFloat"
                                },
                                {
                                  "@name":"depth",
                                  "@accessType":"outputOnly",
                                  "@type":"SFFloat"
                                },
                                {
                                  "@name":"traceEnabled",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFBool",
                                  "@value":true
                                },
                                {
                                  "@name":"built",
                                  "@accessType":"outputOnly",
                                  "@type":"SFBool"
                                }
                              ],
                              "IS": {
                                  "connect": [
                                    {
                                      "@nodeField":"name",
                                      "@protoField":"name"
                                    },
                                    {
                                      "@nodeField":"description",
                                      "@protoField":"description"
                                    },
                                    {
                                      "@nodeField":"size",
                                      "@protoField":"size"
                                    },
                                    {
                                      "@nodeField":"showSides",
                                      "@protoField":"showSides"
                                    },
                                    {
                                      "@nodeField":"width",
                                      "@protoField":"width"
                                    },
                                    {
                                      "@nodeField":"height",
                                      "@protoField":"height"
                                    },
                                    {
                                      "@nodeField":"depth",
                                      "@protoField":"depth"
                                    },
                                    {
                                      "@nodeField":"built",
                                      "@protoField":"built"
                                    }
                                  ]
                              },
                              "#sourceText":[
"ecmascript:",
"",
"function tracePrint (outputString)",
"{",
"\tif (traceEnabled) Browser.print ('[Floor' + name + ']' + outputString);",
"}",
"function alwaysPrint (outputString)",
"{",
"\tBrowser.print ('[Floor' + name + ']' + outputString);",
"}",
"function initialize ()",
"{",
"\tbuilt = false;",
"\ttracePrint ('description=' + description);",
"\ttracePrint ('showSides=' + showSides);",
"\tif (showSides == true) wallsVisible = 0; // goes to Switch whichChoice",
"\ttracePrint ('wallsVisible=' + wallsVisible);",
"\tif ((size.point.length == 0) || (size.point.length > 1))",
"\t\talwaysPrint ('** warning, size.point.length =' + size.point.length + ' rather than 1');",
"\twidth  = size.point[0].x;",
"\theight = size.point[0].y;",
"\tdepth  = size.point[0].z;",
"\ttracePrint ('(width, height, depth)=(' + width + ',' + height + ',' +  depth + ')');",
"\t// floor is immediately above ceiling",
"\tfloorPoints = new MFVec3f (",
"\t\tnew SFVec3f (0, 0, 0),",
"\t\tnew SFVec3f (width, 0, 0),",
"\t\tnew SFVec3f (width, 0, -depth),",
"\t\tnew SFVec3f (0, 0, -depth),",
"\t\tnew SFVec3f (0, -height, 0),",
"\t\tnew SFVec3f (width, -height, 0),",
"\t\tnew SFVec3f (width, -height, -depth),",
"\t\tnew SFVec3f (0, -height, -depth));",
"\ttracePrint ('floorPoints=' + floorPoints);",
"\tbuilt = true;",
"\ttracePrint ('built=' + built);",
"}"
]
                            }
                          },
                          { "ROUTE":
                            {
                              "@fromField":"floorPoints",
                              "@fromNode":"FloorConstructionScript",
                              "@toField":"point",
                              "@toNode":"FloorCoordinate"
                            }
                          },
                          { "ROUTE":
                            {
                              "@fromField":"wallsVisible",
                              "@fromNode":"FloorConstructionScript",
                              "@toField":"whichChoice",
                              "@toNode":"FloorSidesSwitch"
                            }
                          }
                        ]
                      }
                    }
                  ]
              }
            }
          },
          { "ProtoDeclare":
            {
              "@name":"Wall",
              "@appinfo":"Each Wall contains exterior and interior walls.",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"name",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Identifying name for this Wall.",
                      "@type":"SFString"
                    },
                    {
                      "@name":"description",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Description info for this construction.",
                      "@type":"MFString"
                    },
                    {
                      "@name":"size",
                      "@accessType":"initializeOnly",
                      "@appinfo":"single-value Coordinate node with dimension x=width y=height z=depth in meters",
                      "@type":"SFNode",
                      "-children":[
                        { "Coordinate":
                          {
                            "@point":[0,0,0]
                          }
                        }
                      ]
                    },
                    {
                      "@name":"interiorAppearance",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Appearance node with Material colors ImageTexture etc. for this construction.",
                      "@type":"SFNode",
                      "-children":[
                        { "Appearance":
                          {
                            "@DEF":"DefaultInteriorAppearance",
                            "-material":
                              { "Material":
                                {
                                  "@diffuseColor":[0.4,0.4,0.4]
                                }
                              }
                          }
                        }
                      ]
                    },
                    {
                      "@name":"exteriorAppearance",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Appearance node with Material colors ImageTexture etc. for this construction.",
                      "@type":"SFNode",
                      "-children":[
                        { "Appearance":
                          {
                            "@DEF":"DefaultExteriorAppearance",
                            "-material":
                              { "Material":
                                {
                                  "@diffuseColor":[0.6,0.6,0.6]
                                }
                              }
                          }
                        }
                      ]
                    },
                    {
                      "@name":"showSides",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Whether sides are visible.",
                      "@type":"SFBool",
                      "@value":false
                    },
                    {
                      "@name":"width",
                      "@accessType":"outputOnly",
                      "@appinfo":"width of horizontal side of wall aligned with local X axis.",
                      "@type":"SFFloat"
                    },
                    {
                      "@name":"height",
                      "@accessType":"outputOnly",
                      "@appinfo":"height of Wall aligned with local Y axis.",
                      "@type":"SFFloat"
                    },
                    {
                      "@name":"depth",
                      "@accessType":"outputOnly",
                      "@appinfo":"depth of horizontal thickness of Wall aligned with local -Z axis.",
                      "@type":"SFFloat"
                    },
                    {
                      "@name":"built",
                      "@accessType":"outputOnly",
                      "@appinfo":"Indicate whether initialization complete.",
                      "@type":"SFBool"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Group":
                      {
                        "@DEF":"WallRoot",
                        "-children":[
                          { "Transform":
                            {
                              "@DEF":"LowerLeftOutsideCornerLocationWall",
                              "-children":[
                                { "Shape":
                                  {
                                    "@DEF":"InteriorWall",
                                    "IS": {
                                        "connect": [
                                          {
                                            "@nodeField":"appearance",
                                            "@protoField":"interiorAppearance"
                                          }
                                        ]
                                    },
                                    "-children":[
                                      {
                                        "#comment":"only draw interior-facing side for efficiency, and also so that view piercing external wall immediately sees interior"
                                      }
                                    ],
                                    "-geometry":
                                      { "IndexedFaceSet":
                                        {
                                          "@coordIndex":[4,7,6,5,4,-1],
                                          "-coord":
                                            { "Coordinate":
                                              {
                                                "@DEF":"WallCoordinate"
                                              }
                                            }
                                        }
                                      }
                                  }
                                },
                                { "Shape":
                                  {
                                    "@DEF":"ExteriorWall",
                                    "IS": {
                                        "connect": [
                                          {
                                            "@nodeField":"appearance",
                                            "@protoField":"exteriorAppearance"
                                          }
                                        ]
                                    },
                                    "-geometry":
                                      { "IndexedFaceSet":
                                        {
                                          "@coordIndex":[0,1,2,3,0,-1],
                                          "-coord":
                                            { "Coordinate":
                                              {
                                                "@USE":"WallCoordinate"
                                              }
                                            }
                                        }
                                      }
                                  }
                                },
                                { "Switch":
                                  {
                                    "@DEF":"WallSidesSwitch",
                                    "@whichChoice":-1,
                                    "-children":[
                                      { "Shape":
                                        {
                                          "@DEF":"WallSides",
                                          "IS": {
                                              "connect": [
                                                {
                                                  "@nodeField":"appearance",
                                                  "@protoField":"exteriorAppearance"
                                                }
                                              ]
                                          },
                                          "-geometry":
                                            { "IndexedFaceSet":
                                              {
                                                "@coordIndex":[0,3,7,4,-1,3,2,6,7,-1,1,5,6,2,-1,0,4,5,1,-1],
                                                "-coord":
                                                  { "Coordinate":
                                                    {
                                                      "@USE":"WallCoordinate"
                                                    }
                                                  }
                                              }
                                            }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          { "Script":
                            {
                              "@DEF":"WallConstructionScript",
                              "@directOutput":true,
                              "field": [
                                {
                                  "@name":"name",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFString"
                                },
                                {
                                  "@name":"description",
                                  "@accessType":"initializeOnly",
                                  "@type":"MFString"
                                },
                                {
                                  "@name":"size",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFNode"
                                },
                                {
                                  "@name":"showSides",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFBool"
                                },
                                {
                                  "@name":"wallsVisible",
                                  "@accessType":"outputOnly",
                                  "@type":"SFInt32"
                                },
                                {
                                  "@name":"coordinatePoints",
                                  "@accessType":"outputOnly",
                                  "@type":"MFVec3f"
                                },
                                {
                                  "@name":"width",
                                  "@accessType":"outputOnly",
                                  "@type":"SFFloat"
                                },
                                {
                                  "@name":"height",
                                  "@accessType":"outputOnly",
                                  "@type":"SFFloat"
                                },
                                {
                                  "@name":"depth",
                                  "@accessType":"outputOnly",
                                  "@type":"SFFloat"
                                },
                                {
                                  "@name":"traceEnabled",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFBool",
                                  "@value":true
                                },
                                {
                                  "@name":"built",
                                  "@accessType":"outputOnly",
                                  "@type":"SFBool"
                                }
                              ],
                              "IS": {
                                  "connect": [
                                    {
                                      "@nodeField":"name",
                                      "@protoField":"name"
                                    },
                                    {
                                      "@nodeField":"description",
                                      "@protoField":"description"
                                    },
                                    {
                                      "@nodeField":"size",
                                      "@protoField":"size"
                                    },
                                    {
                                      "@nodeField":"showSides",
                                      "@protoField":"showSides"
                                    },
                                    {
                                      "@nodeField":"width",
                                      "@protoField":"width"
                                    },
                                    {
                                      "@nodeField":"height",
                                      "@protoField":"height"
                                    },
                                    {
                                      "@nodeField":"depth",
                                      "@protoField":"depth"
                                    },
                                    {
                                      "@nodeField":"built",
                                      "@protoField":"built"
                                    }
                                  ]
                              },
                              "#sourceText":[
"ecmascript:",
"",
"function tracePrint (outputString)",
"{",
"\tif (traceEnabled) Browser.print ('[Wall' + name + ']' + outputString);",
"}",
"function alwaysPrint (outputString)",
"{",
"\tBrowser.print ('[Wall' + name + ']' + outputString);",
"}",
"function initialize ()",
"{",
"\tbuilt = false;",
"\ttracePrint ('description=' + description);",
"\ttracePrint ('showSides=' + showSides);",
"\tif (showSides == true) wallsVisible = 0; // goes to Switch whichChoice",
"\ttracePrint ('wallsVisible=' + wallsVisible);",
"\tif ((size.point.length == 0) || (size.point.length > 1))",
"\t\talwaysPrint ('** warning, size.point.length =' + size.point.length + ' rather than 1');",
"\twidth  = size.point[0].x;",
"\theight = size.point[0].y;",
"\tdepth  = size.point[0].z;",
"\ttracePrint ('(width, height, depth)=(' + width + ',' + height + ',' +  depth + ')');",
"\tcoordinatePoints = new MFVec3f (",
"\t\tnew SFVec3f (0, 0, 0),",
"\t\tnew SFVec3f (width, 0, 0),",
"\t\tnew SFVec3f (width, height, 0),",
"\t\tnew SFVec3f (0, height, 0),",
"\t\tnew SFVec3f (0, 0, -depth),",
"\t\tnew SFVec3f (width, 0, -depth),",
"\t\tnew SFVec3f (width, height, -depth),",
"\t\tnew SFVec3f (0, height, -depth));",
"\ttracePrint ('coordinatePoints=' + coordinatePoints);",
"\tbuilt = true;",
"\ttracePrint ('built=' + built);",
"}"
]
                            }
                          },
                          { "ROUTE":
                            {
                              "@fromField":"coordinatePoints",
                              "@fromNode":"WallConstructionScript",
                              "@toField":"point",
                              "@toNode":"WallCoordinate"
                            }
                          },
                          { "ROUTE":
                            {
                              "@fromField":"wallsVisible",
                              "@fromNode":"WallConstructionScript",
                              "@toField":"whichChoice",
                              "@toNode":"WallSidesSwitch"
                            }
                          }
                        ]
                      }
                    }
                  ]
              }
            }
          },
          { "ProtoDeclare":
            {
              "@name":"Level",
              "@appinfo":"collection of a Floor and four Walls working in order up from lowest level (i.e. story) of the Building",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"name",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Identifying name for this Level.",
                      "@type":"SFString"
                    },
                    {
                      "@name":"description",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Description info for this construction.",
                      "@type":"MFString"
                    },
                    {
                      "@name":"floor",
                      "@accessType":"initializeOnly",
                      "@appinfo":"contains single Floor node",
                      "@type":"MFNode",
                      "-children":[
                        { "Group":
                          {
                          }
                        }
                      ]
                    },
                    {
                      "@name":"frontWall",
                      "@accessType":"initializeOnly",
                      "@appinfo":"contains single front Wall node",
                      "@type":"MFNode",
                      "-children":[
                        { "ProtoInstance":
                          {
                            "@name":"Wall"
                          }
                        }
                      ]
                    },
                    {
                      "@name":"rightWall",
                      "@accessType":"initializeOnly",
                      "@appinfo":"contains single right-side Wall node",
                      "@type":"MFNode",
                      "-children":[
                        { "ProtoInstance":
                          {
                            "@name":"Wall"
                          }
                        }
                      ]
                    },
                    {
                      "@name":"rearWall",
                      "@accessType":"initializeOnly",
                      "@appinfo":"contains single rear Wall node",
                      "@type":"MFNode",
                      "-children":[
                        { "ProtoInstance":
                          {
                            "@name":"Wall"
                          }
                        }
                      ]
                    },
                    {
                      "@name":"leftWall",
                      "@accessType":"initializeOnly",
                      "@appinfo":"contains single left-side Wall node",
                      "@type":"MFNode",
                      "-children":[
                        { "ProtoInstance":
                          {
                            "@name":"Wall"
                          }
                        }
                      ]
                    },
                    {
                      "@name":"width",
                      "@accessType":"outputOnly",
                      "@appinfo":"Calculated width of horizontal side of Level aligned with local X axis.",
                      "@type":"SFFloat"
                    },
                    {
                      "@name":"height",
                      "@accessType":"outputOnly",
                      "@appinfo":"Calculated height of Level aligned with local Y axis.",
                      "@type":"SFFloat"
                    },
                    {
                      "@name":"depth",
                      "@accessType":"outputOnly",
                      "@appinfo":"Calculated depth of horizontal thickness of Level aligned with local -Z axis.",
                      "@type":"SFFloat"
                    },
                    {
                      "@name":"built",
                      "@accessType":"outputOnly",
                      "@appinfo":"Indicate whether initialization complete.",
                      "@type":"SFBool"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Group":
                      {
                        "@DEF":"LevelRoot",
                        "-children":[
                          { "Transform":
                            {
                              "@DEF":"FloorTransform",
                              "IS": {
                                  "connect": [
                                    {
                                      "@nodeField":"children",
                                      "@protoField":"floor"
                                    }
                                  ]
                              }
                            }
                          },
                          { "Transform":
                            {
                              "@DEF":"FrontWallTransform",
                              "IS": {
                                  "connect": [
                                    {
                                      "@nodeField":"children",
                                      "@protoField":"frontWall"
                                    }
                                  ]
                              }
                            }
                          },
                          { "Transform":
                            {
                              "@DEF":"RightWallTransform",
                              "@rotation":[0,1,0,1.57079],
                              "IS": {
                                  "connect": [
                                    {
                                      "@nodeField":"children",
                                      "@protoField":"rightWall"
                                    }
                                  ]
                              }
                            }
                          },
                          { "Transform":
                            {
                              "@DEF":"RearWallTransform",
                              "@rotation":[0,1,0,3.1416],
                              "IS": {
                                  "connect": [
                                    {
                                      "@nodeField":"children",
                                      "@protoField":"rearWall"
                                    }
                                  ]
                              }
                            }
                          },
                          { "Transform":
                            {
                              "@DEF":"LeftWallTransform",
                              "@rotation":[0,1,0,4.7124],
                              "IS": {
                                  "connect": [
                                    {
                                      "@nodeField":"children",
                                      "@protoField":"leftWall"
                                    }
                                  ]
                              }
                            }
                          },
                          { "Script":
                            {
                              "@DEF":"LevelConstructionScript",
                              "@directOutput":true,
                              "field": [
                                {
                                  "@name":"name",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFString"
                                },
                                {
                                  "@name":"description",
                                  "@accessType":"initializeOnly",
                                  "@type":"MFString"
                                },
                                {
                                  "@name":"floor",
                                  "@accessType":"initializeOnly",
                                  "@type":"MFNode"
                                },
                                {
                                  "@name":"frontWall",
                                  "@accessType":"initializeOnly",
                                  "@type":"MFNode"
                                },
                                {
                                  "@name":"rightWall",
                                  "@accessType":"initializeOnly",
                                  "@type":"MFNode"
                                },
                                {
                                  "@name":"rearWall",
                                  "@accessType":"initializeOnly",
                                  "@type":"MFNode"
                                },
                                {
                                  "@name":"leftWall",
                                  "@accessType":"initializeOnly",
                                  "@type":"MFNode"
                                },
                                {
                                  "@name":"width",
                                  "@accessType":"outputOnly",
                                  "@type":"SFFloat"
                                },
                                {
                                  "@name":"height",
                                  "@accessType":"outputOnly",
                                  "@type":"SFFloat"
                                },
                                {
                                  "@name":"depth",
                                  "@accessType":"outputOnly",
                                  "@type":"SFFloat"
                                },
                                {
                                  "@name":"rightTranslation",
                                  "@accessType":"outputOnly",
                                  "@type":"SFVec3f"
                                },
                                {
                                  "@name":"rearTranslation",
                                  "@accessType":"outputOnly",
                                  "@type":"SFVec3f"
                                },
                                {
                                  "@name":"leftTranslation",
                                  "@accessType":"outputOnly",
                                  "@type":"SFVec3f"
                                },
                                {
                                  "@name":"traceEnabled",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFBool",
                                  "@value":true
                                },
                                {
                                  "@name":"recheckUntilBuilt",
                                  "@accessType":"inputOnly",
                                  "@appinfo":"New floor or wall initialization may be complete check and recalculate until built",
                                  "@type":"SFTime"
                                },
                                {
                                  "@name":"built",
                                  "@accessType":"outputOnly",
                                  "@type":"SFBool"
                                }
                              ],
                              "IS": {
                                  "connect": [
                                    {
                                      "@nodeField":"name",
                                      "@protoField":"name"
                                    },
                                    {
                                      "@nodeField":"description",
                                      "@protoField":"description"
                                    },
                                    {
                                      "@nodeField":"floor",
                                      "@protoField":"floor"
                                    },
                                    {
                                      "@nodeField":"frontWall",
                                      "@protoField":"frontWall"
                                    },
                                    {
                                      "@nodeField":"rightWall",
                                      "@protoField":"rightWall"
                                    },
                                    {
                                      "@nodeField":"rearWall",
                                      "@protoField":"rearWall"
                                    },
                                    {
                                      "@nodeField":"leftWall",
                                      "@protoField":"leftWall"
                                    },
                                    {
                                      "@nodeField":"width",
                                      "@protoField":"width"
                                    },
                                    {
                                      "@nodeField":"height",
                                      "@protoField":"height"
                                    },
                                    {
                                      "@nodeField":"depth",
                                      "@protoField":"depth"
                                    },
                                    {
                                      "@nodeField":"built",
                                      "@protoField":"built"
                                    }
                                  ]
                              },
                              "#sourceText":[
"ecmascript:",
"",
"var firstLoopWhileTrueCompleted;",
"",
"function tracePrint (outputString)",
"{",
"\tif (traceEnabled) Browser.print ('[Level' + name + ']' + outputString);",
"}",
"function alwaysPrint (outputString)",
"{",
"\tBrowser.print ('[Level' + name + ']' + outputString);",
"}",
"function initialize ()",
"{",
"\tbuilt = false;",
"\tfirstLoopWhileTrueCompleted = false;",
"\talwaysPrint ('initialize, built=' + built);",
"}",
"function recheckUntilBuilt (value)",
"{",
"\tif      (built == true)",
"\t{",
"\t\tbuilt = true; // resend to trigger cancellation event for TimeSensor",
"\t\tif (firstLoopWhileTrueCompleted)",
"\t\t\talwaysPrint ('recheckUntilBuilt() continuous built=true indicates internal error');",
"\t\telse firstLoopWhileTrueCompleted = true;",
"\t\treturn;  // done",
"\t}",
"\talwaysPrint ('recheckUntilBuilt testing...');",
"\t// following are single nodes, cast as MFNode type for IS/connect matchups",
"\tif      (floor[0].built == false)\treturn;  // not yet ready",
"\telse if (frontWall[0].built == false)\treturn;",
"\telse if (rightWall[0].built == false)\treturn;",
"\telse if (rearWall[0].built == false)\treturn;",
"\telse if (leftWall[0].built == false)\treturn;",
"\talwaysPrint ('recheckUntilBuilt ready, initializing Level...');",
"",
"\talwaysPrint ('description=' + description);",
"\tif (floor)",
"\t{",
"\t//\ttracePrint ('floor found');",
"\t\tif (floor.length > 1)",
"\t\t\talwaysPrint ('** warning, more than one floor found (' +",
"\t\t\t\tfloor.length + ' nodes total)');",
"\t\ttracePrint ('floor (width, height, depth)=(' +",
"\t\t\tfloor[0].width + ',' + floor[0].height + ',' +  floor[0].depth + ')');",
"\t}",
"\telse\ttracePrint ('floor not found');",
"",
"\tif (frontWall)",
"\t{",
"\t//\ttracePrint ('frontWall found');",
"\t\tif (frontWall > 1)",
"\t\t\talwaysPrint ('** warning, more than one frontWall found (' +",
"\t\t\t\tfrontWall.length + ' nodes total)');",
"\t\ttracePrint ('frontWall (width, height, depth)=(' +",
"\t\t\tfrontWall[0].width + ',' + frontWall[0].height + ',' +  frontWall[0].depth + ')');",
"\t}",
"\telse\ttracePrint ('frontWall not found');",
"",
"\tif (rightWall)",
"\t{",
"\t//\ttracePrint ('rightWall found');",
"\t\tif (rightWall > 1)",
"\t\t\talwaysPrint ('** warning, more than one rightWall found (' +",
"\t\t\t\tfrontWall.length + ' nodes total)');",
"\t\ttracePrint ('rightWall (width, height, depth)=(' +",
"\t\t\trightWall[0].width + ',' + rightWall[0].height + ',' +  rightWall[0].depth + ')');",
"\t}",
"",
"\telse\ttracePrint ('rightWall not found');",
"",
"\tif (rearWall)",
"\t{",
"\t//\ttracePrint ('rearWall found');",
"\t\tif (frontWall > 1)",
"\t\t\talwaysPrint ('** warning, more than one rearWall found (' +",
"\t\t\t\trearWall + ' nodes total)');",
"\t\ttracePrint ('rearWall (width, height, depth)=(' +",
"\t\t\trearWall[0].width + ',' + rearWall[0].height + ',' +  rearWall[0].depth + ')');",
"\t}",
"\telse\ttracePrint ('rearWall not found');",
"",
"\tif (leftWall)",
"\t{",
"\t//\ttracePrint ('leftWall found');",
"\t\tif (frontWall > 1)",
"\t\t\talwaysPrint ('** warning, more than one leftWall found (' +",
"\t\t\t\tleftWall.length + ' nodes total)');",
"\t\ttracePrint ('leftWall (width, height, depth)=(' +",
"\t\t\tleftWall[0].width + ',' + leftWall[0].height + ',' +  leftWall[0].depth + ')');",
"\t}",
"\telse\ttracePrint ('leftWall not found');",
"",
"\tif (floor && frontWall)",
"\t{",
"\t\tif ((floor[0].width != frontWall[0].width) && (floor[0].width != 0) && (frontWall[0].width != 0))",
"\t\t\talwaysPrint ('** warning, floor/frontWall width mismatch');",
"\t}",
"\tif (floor && rearWall)",
"\t{",
"\t\tif ((floor[0].width != rearWall[0].width) && (floor[0].width != 0) && (rearWall[0].width != 0))",
"\t\t\talwaysPrint ('** warning, floor/rearWall width mismatch');",
"\t}",
"\tif (floor && rightWall)",
"\t{",
"\t\tif ((floor[0].depth != rightWall[0].width) && (floor[0].depth != 0) && (rightWall[0].width != 0))",
"\t\t\talwaysPrint ('** warning, floor.depth/rightWall.width mismatch');",
"\t}",
"\tif (floor && leftWall)",
"\t{",
"\t\tif ((floor[0].depth != leftWall[0].width) && (floor[0].depth != 0) && (leftWall[0].width != 0))",
"\t\t\talwaysPrint ('** warning, floor.depth/leftWall.width mismatch');",
"\t}",
"\tif (frontWall && rearWall)",
"\t{",
"\t\tif ((frontWall[0].width != rearWall[0].width) && (frontWall[0].width != 0) && (rearWall[0].width != 0))",
"\t\t\talwaysPrint ('** warning, frontWall/rearWall width mismatch');",
"\t}",
"\tif (leftWall && rightWall)",
"\t{",
"\t\tif ((leftWall[0].width != rightWall[0].width) && (leftWall[0].width != 0) && (rightWall[0].width != 0))",
"\t\t\talwaysPrint ('** warning, leftWall/rightWall width mismatch');",
"\t}",
"",
"\t// find first nonzero values",
"\twidth = 0;",
"\tif (floor)                     width = floor[0].width;",
"\tif (frontWall && (width == 0)) width = frontWall[0].width;",
"\tif (rearWall  && (width == 0)) width = rearWall[0].width;",
"",
"\theight = 0;",
"\tif      (frontWall)                  height = frontWall[0].height;",
"\tif      (rightWall && (height == 0)) height = rightWall[0].height;",
"\telse if (rearWall  && (height == 0)) height = rearWall[0].height;",
"\telse if (leftWall  && (height == 0)) height = leftWall[0].height;",
"",
"\tdepth = 0;",
"\tif (floor)                     depth = floor[0].depth;",
"\tif (rightWall && (depth == 0)) depth = rightWall[0].depth;",
"\tif (leftWall  && (depth == 0)) depth = leftWall[0].depth;",
"",
"\ttracePrint ('(width, height, depth)=(' + width + ',' + height + ',' +  depth + ')');",
"",
"\t// translate wall centers (not corners)",
"\trightTranslation = new SFVec3f (width, 0, 0);",
"\ttracePrint ('rightTranslation=' + rightTranslation);",
"\trearTranslation = new SFVec3f  (width, 0, -depth);",
"\ttracePrint ('rearTranslation=' + rearTranslation);",
"\tleftTranslation = new SFVec3f  (0, 0, -width/2);",
"\ttracePrint ('leftTranslation=' + leftTranslation);",
"\tbuilt = true;",
"\ttracePrint ('built=' + built);",
"}"
]
                            }
                          },
                          { "ROUTE":
                            {
                              "@fromField":"rightTranslation",
                              "@fromNode":"LevelConstructionScript",
                              "@toField":"translation",
                              "@toNode":"RightWallTransform"
                            }
                          },
                          { "ROUTE":
                            {
                              "@fromField":"rearTranslation",
                              "@fromNode":"LevelConstructionScript",
                              "@toField":"translation",
                              "@toNode":"RearWallTransform"
                            }
                          },
                          { "ROUTE":
                            {
                              "@fromField":"leftTranslation",
                              "@fromNode":"LevelConstructionScript",
                              "@toField":"translation",
                              "@toNode":"LeftWallTransform"
                            }
                          },
                          { "Group":
                            {
                              "@DEF":"LevelInitializeAfterChildrenReady",
                              "-children":[
                                { "BooleanFilter":
                                  {
                                    "@DEF":"LevelBuiltFilter"
                                  }
                                },
                                { "BooleanFilter":
                                  {
                                    "@DEF":"LevelBuiltNegation"
                                  }
                                },
                                { "TimeSensor":
                                  {
                                    "@DEF":"LevelRecalculateUntilBuilt",
                                    "@cycleInterval":0.1,
                                    "@loop":true
                                  }
                                },
                                { "ROUTE":
                                  {
                                    "@fromField":"built",
                                    "@fromNode":"LevelConstructionScript",
                                    "@toField":"set_boolean",
                                    "@toNode":"LevelBuiltFilter"
                                  }
                                },
                                { "ROUTE":
                                  {
                                    "@fromField":"inputTrue",
                                    "@fromNode":"LevelBuiltFilter",
                                    "@toField":"set_boolean",
                                    "@toNode":"LevelBuiltNegation"
                                  }
                                },
                                { "ROUTE":
                                  {
                                    "@fromField":"inputNegate",
                                    "@fromNode":"LevelBuiltNegation",
                                    "@toField":"enabled",
                                    "@toNode":"LevelRecalculateUntilBuilt"
                                  }
                                },
                                { "ROUTE":
                                  {
                                    "@fromField":"cycleTime",
                                    "@fromNode":"LevelRecalculateUntilBuilt",
                                    "@toField":"recheckUntilBuilt",
                                    "@toNode":"LevelConstructionScript"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
              }
            }
          },
          { "ProtoDeclare":
            {
              "@name":"Building",
              "@appinfo":"Collect prototypes for levels floors and walls to create a simple Building.",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"name",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Identifying name of this Building.",
                      "@type":"SFString"
                    },
                    {
                      "@name":"description",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Description info for this construction.",
                      "@type":"MFString"
                    },
                    {
                      "@name":"authorAssist",
                      "@accessType":"initializeOnly",
                      "@appinfo":"whether or not to display author assist tools such as coordinate axes measuring grids etc.",
                      "@type":"SFBool",
                      "@value":true
                    },
                    {
                      "@name":"xHeading",
                      "@accessType":"initializeOnly",
                      "@appinfo":"compass direction in degrees of building X axis as seen when regarding front face of building pointing from left side to right side.",
                      "@type":"SFFloat",
                      "@value":0.0
                    },
                    {
                      "@name":"orientation",
                      "@accessType":"outputOnly",
                      "@appinfo":"output rotation value calculated from xHeading as (0 1 0 xHeading * 2pi / 360)",
                      "@type":"SFRotation"
                    },
                    {
                      "@name":"latitude",
                      "@accessType":"initializeOnly",
                      "@appinfo":"example value: 120.30 E",
                      "@type":"SFString"
                    },
                    {
                      "@name":"longitude",
                      "@accessType":"initializeOnly",
                      "@appinfo":"example value: 20.45 N",
                      "@type":"SFString"
                    },
                    {
                      "@name":"levels",
                      "@accessType":"initializeOnly",
                      "@appinfo":"contains array of Level nodes",
                      "@type":"MFNode",
                      "-children":[
                        { "ProtoInstance":
                          {
                            "@name":"Level"
                          }
                        }
                      ]
                    },
                    {
                      "@name":"roof",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Geometry for Roof positioned above topmost Level",
                      "@type":"SFNode",
                      "-children":[
                        { "Group":
                          {
                          }
                        }
                      ]
                    },
                    {
                      "@name":"roofHeight",
                      "@accessType":"initializeOnly",
                      "@appinfo":"height value for provided Roof geometry.",
                      "@type":"SFFloat",
                      "@value":0
                    },
                    {
                      "@name":"width",
                      "@accessType":"outputOnly",
                      "@appinfo":"Calculated width of horizontal side of Building aligned with local X axis.",
                      "@type":"SFFloat"
                    },
                    {
                      "@name":"height",
                      "@accessType":"outputOnly",
                      "@appinfo":"Calculated height of Building aligned with local Y axis.",
                      "@type":"SFFloat"
                    },
                    {
                      "@name":"depth",
                      "@accessType":"outputOnly",
                      "@appinfo":"Calculated depth of horizontal thickness of Building aligned with local -Z axis.",
                      "@type":"SFFloat"
                    },
                    {
                      "@name":"built",
                      "@accessType":"outputOnly",
                      "@appinfo":"Indicate whether initialization complete.",
                      "@type":"SFBool"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Group":
                      {
                        "-children":[
                          { "Switch":
                            {
                              "@DEF":"AuthorAssist1",
                              "@whichChoice":-1,
                              "-children":[
                                { "Transform":
                                  {
                                    "@DEF":"CoordinateAxesTransform",
                                    "-children":[
                                      { "Inline":
                                        {
                                          "@DEF":"CoordinateAxes",
                                          "@url":["../../X3dForWebAuthors/Chapter03-Grouping/CoordinateAxes.x3d","http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter03-Grouping/CoordinateAxes.x3d","https://savage.nps.edu/Savage/Tools/Authoring/CoordinateAxes.x3d","../../X3dForWebAuthors/Chapter03-Grouping/CoordinateAxes.wrl","http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter03-Grouping/CoordinateAxes.wrl","https://savage.nps.edu/Savage/Tools/Authoring/CoordinateAxes.wrl"]
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          { "Group":
                            {
                              "@DEF":"BuildingRoot",
                              "-children":[
                                { "Transform":
                                  {
                                    "@DEF":"LevelsRoot",
                                    "-children":[
                                      { "Switch":
                                        {
                                          "@DEF":"AuthorAssist2",
                                          "@whichChoice":-1,
                                          "-children":[
                                            { "Transform":
                                              {
                                                "@DEF":"AuthorAssistTransform2",
                                                "-children":[
                                                  { "Inline":
                                                    {
                                                      "@url":["GridXY_20x20Movable.wrl","http://www.web3d.org/x3d/content/examples/Basic/course/GridXY_20x20Movable.wrl","https://savage.nps.edu/Savage/Tools/Authoring/GridXY_20x20Movable.wrl","GridXY_20x20Movable.x3d","http://www.web3d.org/x3d/content/examples/Basic/course/GridXY_20x20Movable.x3d","https://savage.nps.edu/Savage/Tools/Authoring/GridXY_20x20Movable.x3d"]
                                                    }
                                                  },
                                                  { "Inline":
                                                    {
                                                      "@url":["GridXZ_20x20Movable.wrl","http://www.web3d.org/x3d/content/examples/Basic/course/GridXZ_20x20Movable.wrl","https://savage.nps.edu/Savage/Tools/Authoring/GridXZ_20x20Movable.wrl","GridXZ_20x20Movable.x3d","http://www.web3d.org/x3d/content/examples/Basic/course/GridXZ_20x20Movable.x3d","https://savage.nps.edu/Savage/Tools/Authoring/GridXZ_20x20Movable.x3d"]
                                                    }
                                                  },
                                                  { "Inline":
                                                    {
                                                      "@url":["GridYZ_20x20Movable.wrl","http://www.web3d.org/x3d/content/examples/Basic/course/GridYZ_20x20Movable.wrl","https://savage.nps.edu/Savage/Tools/Authoring/GridYZ_20x20Movable.wrl","GridYZ_20x20Movable.x3d","http://www.web3d.org/x3d/content/examples/Basic/course/GridYZ_20x20Movable.x3d","https://savage.nps.edu/Savage/Tools/Authoring/GridYZ_20x20Movable.x3d"]
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                },
                                { "Script":
                                  {
                                    "@DEF":"BuildingConstructionScript",
                                    "@directOutput":true,
                                    "field": [
                                      {
                                        "@name":"name",
                                        "@accessType":"initializeOnly",
                                        "@type":"SFString"
                                      },
                                      {
                                        "@name":"description",
                                        "@accessType":"initializeOnly",
                                        "@type":"MFString"
                                      },
                                      {
                                        "@name":"xHeading",
                                        "@accessType":"initializeOnly",
                                        "@type":"SFFloat"
                                      },
                                      {
                                        "@name":"orientation",
                                        "@accessType":"outputOnly",
                                        "@type":"SFRotation"
                                      },
                                      {
                                        "@name":"latitude",
                                        "@accessType":"initializeOnly",
                                        "@type":"SFString"
                                      },
                                      {
                                        "@name":"longitude",
                                        "@accessType":"initializeOnly",
                                        "@type":"SFString"
                                      },
                                      {
                                        "@name":"authorAssist",
                                        "@accessType":"initializeOnly",
                                        "@type":"SFBool"
                                      },
                                      {
                                        "@name":"levels",
                                        "@accessType":"initializeOnly",
                                        "@type":"MFNode"
                                      },
                                      {
                                        "@name":"roof",
                                        "@accessType":"initializeOnly",
                                        "@type":"SFNode"
                                      },
                                      {
                                        "@name":"roofHeight",
                                        "@accessType":"initializeOnly",
                                        "@type":"SFFloat"
                                      },
                                      {
                                        "@name":"LevelsRoot",
                                        "@accessType":"initializeOnly",
                                        "@type":"SFNode",
                                        "-children":[
                                          { "Transform":
                                            {
                                              "@USE":"LevelsRoot"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "@name":"width",
                                        "@accessType":"outputOnly",
                                        "@type":"SFFloat"
                                      },
                                      {
                                        "@name":"height",
                                        "@accessType":"outputOnly",
                                        "@type":"SFFloat"
                                      },
                                      {
                                        "@name":"depth",
                                        "@accessType":"outputOnly",
                                        "@type":"SFFloat"
                                      },
                                      {
                                        "@name":"scale",
                                        "@accessType":"outputOnly",
                                        "@type":"SFVec3f"
                                      },
                                      {
                                        "@name":"authorAssistChoice",
                                        "@accessType":"outputOnly",
                                        "@type":"SFInt32"
                                      },
                                      {
                                        "@name":"traceEnabled",
                                        "@accessType":"initializeOnly",
                                        "@type":"SFBool",
                                        "@value":true
                                      },
                                      {
                                        "@name":"recheckUntilBuilt",
                                        "@accessType":"inputOnly",
                                        "@appinfo":"New floor or wall initialization may be complete check and recalculate until built",
                                        "@type":"SFTime"
                                      },
                                      {
                                        "@name":"built",
                                        "@accessType":"outputOnly",
                                        "@type":"SFBool"
                                      }
                                    ],
                                    "IS": {
                                        "connect": [
                                          {
                                            "@nodeField":"name",
                                            "@protoField":"name"
                                          },
                                          {
                                            "@nodeField":"description",
                                            "@protoField":"description"
                                          },
                                          {
                                            "@nodeField":"authorAssist",
                                            "@protoField":"authorAssist"
                                          },
                                          {
                                            "@nodeField":"xHeading",
                                            "@protoField":"xHeading"
                                          },
                                          {
                                            "@nodeField":"orientation",
                                            "@protoField":"orientation"
                                          },
                                          {
                                            "@nodeField":"latitude",
                                            "@protoField":"latitude"
                                          },
                                          {
                                            "@nodeField":"longitude",
                                            "@protoField":"longitude"
                                          },
                                          {
                                            "@nodeField":"levels",
                                            "@protoField":"levels"
                                          },
                                          {
                                            "@nodeField":"roof",
                                            "@protoField":"roof"
                                          },
                                          {
                                            "@nodeField":"roofHeight",
                                            "@protoField":"roofHeight"
                                          },
                                          {
                                            "@nodeField":"width",
                                            "@protoField":"width"
                                          },
                                          {
                                            "@nodeField":"height",
                                            "@protoField":"height"
                                          },
                                          {
                                            "@nodeField":"depth",
                                            "@protoField":"depth"
                                          },
                                          {
                                            "@nodeField":"built",
                                            "@protoField":"built"
                                          }
                                        ]
                                    },
                                    "#sourceText":[
"ecmascript:",
"",
"var firstLoopWhileTrueCompleted;",
"",
"function tracePrint (outputString)",
"{",
"\tif (traceEnabled) Browser.print ('[Building' + name + ']' + outputString);",
"}",
"function alwaysPrint (outputString)",
"{",
"\tBrowser.print ('[Building' + name + ']' + outputString);",
"}",
"function initialize ()",
"{",
"\tbuilt = false;",
"\tfirstLoopWhileTrueCompleted = false;",
"\talwaysPrint ('initialize, built=' + built);",
"}",
"function recheckUntilBuilt (value)",
"{",
"\tif      (built == true)",
"\t{",
"\t\tbuilt = true; // resend to trigger cancellation event for TimeSensor",
"\t\tif (firstLoopWhileTrueCompleted)",
"\t\t\talwaysPrint ('recheckUntilBuilt() continuous built=true indicates internal error');",
"\t\telse firstLoopWhileTrueCompleted = true;",
"\t\treturn;  // done",
"\t}",
"\ttracePrint ('recheckUntilBuilt testing...');",
"\tif      (built == true)\t\t\treturn;  // done",
"\tfor (i=0; i < levels.length; i++)",
"\t{",
"\t\tif (levels[i].built == false)\treturn;  // not yet ready",
"\t}",
"\ttracePrint ('recheckUntilBuilt ready!');",
"",
"\talwaysPrint ('description=' + description);",
"\tif (levels.length == 0)",
"\t{",
"\t\talwaysPrint ('** warning, no levels found');",
"\t\treturn;",
"\t}",
"\torientation = new SFRotation (0, 1, 0, -xHeading * 3.14159 / 180.0);",
"\tLevelsRoot.rotation = orientation;",
"\ttracePrint ('xHeading=' + xHeading + ' degrees,' + 'orientation=' + orientation);",
"",
"\twidth  = 0;",
"\tdepth  = 0;",
"\tincrementalHeight = 0;",
"\t// first child of LevelsRoot is oriented AuthorAssist2 Switch",
"\tfor (i=0; i < levels.length; i++)",
"\t{",
"\t\ttracePrint ('level[' + i + ']');",
"\t\t// compute max values for width, height, depth",
"\t\tif (width  < levels[i].width)  width   = levels[i].width;",
"\t\tif (depth  < levels[i].depth)  depth   = levels[i].depth;",
"",
"\t\tnewTransform ='Transform {' +",
"\t\t'translation 0' + incrementalHeight + ' 0' +",
"\t\t'}';",
"\t\ttracePrint ('newTransform=' + newTransform);",
"\t\tnewTransformNode = Browser.createVrmlFromString (newTransform); // returns MFNode",
"\t\t// append newTransformNode to LevelsRoot.children",
"\t\tLevelsRoot.children[i+1] = newTransformNode[0];",
"\t\t// append current Level to current newTransformNode",
"\t\tnewTransformNode[0].children[0] = levels[i];",
"",
"\t\tincrementalHeight += levels[i].height;",
"\t\ttracePrint ('incrementalHeight=' + incrementalHeight);",
"\t}",
"\tchildCount = levels.length + 1;",
"\tif (roof)",
"\t{",
"\t\ttracePrint ('roof');",
"\t\tnewTransform ='Transform {' +",
"\t\t'translation 0' + incrementalHeight + ' 0' +",
"\t\t'}';",
"\t\ttracePrint ('newTransform=' + newTransform);",
"\t\tnewTransformNode = Browser.createVrmlFromString (newTransform); // returns MFNode",
"\t\t// append newTransformNode to LevelsRoot.children",
"\t\tLevelsRoot.children[childCount] = newTransformNode[0];",
"\t\tchildCount++;",
"\t\t// append roof to current newTransformNode",
"\t\tnewTransformNode[0].children[0] = roof;",
"\t\tincrementalHeight += roofHeight;",
"\t}",
"\telse alwaysPrint ('** warning, no roof found');",
"",
"\theight = incrementalHeight;",
"\ttracePrint ('(width, height, depth)=(' + width + ',' + height + ',' +  depth + ')');",
"\tmaxDimension = width;",
"\tif (maxDimension < height) maxDimension = height;",
"\tif (maxDimension < depth)  maxDimension = depth;",
"\tscale = new SFVec3f (maxDimension * 1.1, maxDimension * 1.1, maxDimension * 1.1);",
"",
"\tnewView ='Viewpoint {' +",
"\t'description \\\"' + name + ' (' + latitude + ',' + longitude + ')\\\"' +",
"\t'position' + (width/2) + ' ' + (height*2.0/3.0) + ' ' + (depth*3) + ' ' +",
"\t'}';",
"\ttracePrint ('newView=' + newView);",
"\tnewViewNode = Browser.createVrmlFromString (newView); // returns MFNode",
"\t// append newViewNode to LevelsRoot.children",
"\tLevelsRoot.children[childCount] = newViewNode[0];",
"\tchildCount++;",
"",
"\tnewView ='Viewpoint {' +",
"\t'description \\\"' + name + ' (above)\\\"' +",
"\t'position' + (width/2) + ' ' + (height*3.0) + ' ' + (-depth/2) + ' ' +",
"\t'orientation 1 0 0 -1.57' +",
"\t'}';",
"\ttracePrint ('newView=' + newView);",
"\tnewViewNode = Browser.createVrmlFromString (newView); // returns MFNode",
"\t// append newViewNode to LevelsRoot.children",
"\tLevelsRoot.children[childCount] = newViewNode[0];",
"\tchildCount++;",
"",
"\tif (authorAssist)",
"\t{",
"\t\ttracePrint ('authorAssist');",
"\t\tauthorAssistChoice = 0;",
"\t}",
"\telse\tauthorAssistChoice = -1;",
"",
"\ttracePrint ('LevelsRoot childCount=' + childCount + ' (Switch + # levels + [roof] + Viewpoint*2)');",
"\tbuilt = true;",
"\ttracePrint ('built=' + built);",
"}"
]
                                  }
                                },
                                { "ROUTE":
                                  {
                                    "@fromField":"authorAssistChoice",
                                    "@fromNode":"BuildingConstructionScript",
                                    "@toField":"whichChoice",
                                    "@toNode":"AuthorAssist1"
                                  }
                                },
                                { "ROUTE":
                                  {
                                    "@fromField":"authorAssistChoice",
                                    "@fromNode":"BuildingConstructionScript",
                                    "@toField":"whichChoice",
                                    "@toNode":"AuthorAssist2"
                                  }
                                },
                                { "ROUTE":
                                  {
                                    "@fromField":"scale",
                                    "@fromNode":"BuildingConstructionScript",
                                    "@toField":"scale",
                                    "@toNode":"CoordinateAxesTransform"
                                  }
                                },
                                { "Group":
                                  {
                                    "@DEF":"BuildingInitializeAfterChildrenReady",
                                    "-children":[
                                      { "BooleanFilter":
                                        {
                                          "@DEF":"BuildingBuiltFilter"
                                        }
                                      },
                                      { "BooleanFilter":
                                        {
                                          "@DEF":"BuildingBuiltNegation"
                                        }
                                      },
                                      { "TimeSensor":
                                        {
                                          "@DEF":"BuildingRecalculateUntilBuilt",
                                          "@cycleInterval":0.1,
                                          "@loop":true
                                        }
                                      },
                                      { "ROUTE":
                                        {
                                          "@fromField":"built",
                                          "@fromNode":"BuildingConstructionScript",
                                          "@toField":"set_boolean",
                                          "@toNode":"BuildingBuiltFilter"
                                        }
                                      },
                                      { "ROUTE":
                                        {
                                          "@fromField":"inputTrue",
                                          "@fromNode":"BuildingBuiltFilter",
                                          "@toField":"set_boolean",
                                          "@toNode":"BuildingBuiltNegation"
                                        }
                                      },
                                      { "ROUTE":
                                        {
                                          "@fromField":"inputNegate",
                                          "@fromNode":"BuildingBuiltNegation",
                                          "@toField":"enabled",
                                          "@toNode":"BuildingRecalculateUntilBuilt"
                                        }
                                      },
                                      { "ROUTE":
                                        {
                                          "@fromField":"cycleTime",
                                          "@fromNode":"BuildingRecalculateUntilBuilt",
                                          "@toField":"recheckUntilBuilt",
                                          "@toNode":"BuildingConstructionScript"
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
              }
            }
          },
          {
            "#comment":"============================"
          },
          { "Viewpoint":
            {
              "@description":"SimpleBuildingConstructionPrototypes",
              "@position":[0,0,12]
            }
          },
          { "Background":
            {
              "@groundAngle":[1.57],
              "@groundColor":[0.6,0.9,0.6,0.6,0.9,0.6],
              "@skyColor":[0.6,0.6,0.9]
            }
          },
          { "Anchor":
            {
              "@description":"SimpleBuildingConstructionExample",
              "@parameter":["target=_blank"],
              "@url":["SimpleBuildingConstructionExample.wrl","https://savage.nps.edu/Savage/Buildings/UHRB/SimpleBuildingConstructionExample.wrl","SimpleBuildingConstructionExample.x3d","https://savage.nps.edu/Savage/Buildings/UHRB/SimpleBuildingConstructionExample.x3d"],
              "-children":[
                { "Shape":
                  {
                    "-geometry":
                      { "Text":
                        {
                          "@string":["SimpleBuildingConstructionPrototypes","is a prototype definition file","","Click this text to see","SimpleBuildingConstructionExample"],
                          "-fontStyle":
                            { "FontStyle":
                              {
                                "@justify":["MIDDLE","MIDDLE"]
                              }
                            }
                        }
                      },
                    "-appearance":
                      { "Appearance":
                        {
                          "-material":
                            { "Material":
                              {
                                "@diffuseColor":[0.2,0.2,0.8]
                              }
                            }
                        }
                      }
                  }
                }
              ]
            }
          }
        ]
    }
  }
}