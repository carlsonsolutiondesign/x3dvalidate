{ "X3D": {
    "encoding":"UTF-8",
    "@profile":"Immersive",
    "@version":"3.0",
    "@xsd:noNamespaceSchemaLocation":"http://www.web3d.org/specifications/x3d-3.0.xsd",
    "JSON schema":"http://www.web3d.org/specifications/x3d-3.3-JSONSchema.json",
    "head": {
        "meta": [
          {
            "@name":"title",
            "@content":"ColorSequencerPrototype.x3d"
          },
          {
            "@name":"description",
            "@content":"ColorSequencer outputs an individual SFColor without interpolation, in response to selecting an array value or simply sequencing next/previous."
          },
          {
            "@name":"creator",
            "@content":"Don Brutzman"
          },
          {
            "@name":"created",
            "@content":"25 May 2003"
          },
          {
            "@name":"modified",
            "@content":"1 November 2015"
          },
          {
            "@name":"reference",
            "@content":"http://www.web3d.org/technicalinfo/specifications/vrml97/part1/nodesRef.html#ScalarInterpolator"
          },
          {
            "@name":"reference",
            "@content":"https://savage.nps.edu/Savage/Tools/Animation/BooleanSequencerPrototype.x3d"
          },
          {
            "@name":"reference",
            "@content":"ColorSequencerExample.x3d"
          },
          {
            "@name":"subject",
            "@content":"color sequencer"
          },
          {
            "@name":"identifier",
            "@content":"https://savage.nps.edu/Savage/Tools/Animation/ColorSequencerPrototype.x3d"
          },
          {
            "@name":"generator",
            "@content":"X3D-Edit 3.2, https://savage.nps.edu/X3D-Edit"
          },
          {
            "@name":"license",
            "@content":"../../license.html"
          },
          {
            "@name":"translated",
            "@content":"19 March 2017"
          },
          {
            "@name":"generator",
            "@content":"X3dToJson.xslt, http://www.web3d.org/x3d/stylesheets/X3dToJson.html"
          },
          {
            "@name":"warning",
            "@content":"An experimental version of X3D JSON encoding is used for this scene.  Status online at http://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
          }
        ]
    },
    "Scene": {
        "-children":[
          { "ProtoDeclare":
            {
              "@name":"ColorSequencer",
              "@appinfo":"ColorSequencer outputs a single color value by selecting an array index or simply sequencing next/previous",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"enabled",
                      "@accessType":"inputOutput",
                      "@appinfo":"Whether or not this sequencer is active",
                      "@type":"SFBool",
                      "@value":true
                    },
                    {
                      "@name":"index",
                      "@accessType":"inputOutput",
                      "@appinfo":"Initial index is array element 0. Setting index past colors[max] uses final color value setting, while index less than 0 uses colors[0] value.",
                      "@type":"SFInt32",
                      "@value":0
                    },
                    {
                      "@name":"colors",
                      "@accessType":"inputOutput",
                      "@appinfo":"Array of color values that are each the outputs of the sequencer. No interpolation occurs between values.",
                      "@type":"MFColor"
                    },
                    {
                      "@name":"color_changed",
                      "@accessType":"outputOnly",
                      "@appinfo":"Current output color value of the sequencer corresponding to colors[index] value.",
                      "@type":"SFColor"
                    },
                    {
                      "@name":"previous",
                      "@accessType":"inputOnly",
                      "@appinfo":"Trigger previous color value. Wrap around from zeroth color to final color if necessary. Only respond to true inputs.",
                      "@type":"SFBool"
                    },
                    {
                      "@name":"next",
                      "@accessType":"inputOnly",
                      "@appinfo":"Trigger next color value. Wrap around from final color to zeroth color if necessary. Only respond to true inputs.",
                      "@type":"SFBool"
                    },
                    {
                      "@name":"traceEnabled",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Enable tracing of node operation on browser console",
                      "@type":"SFBool",
                      "@value":false
                    }
                  ],
                  "-children":[
                    {
                      "#comment":"Utility methods"
                    },
                    {
                      "#comment":"<field accessType='inputOnly' appinfo='Change colors array' name='set_colors' type='MFColor'/>"
                    },
                    {
                      "#comment":"<field accessType='inputOnly' appinfo='Change current colors index must be in range [0 .. colors.length-1]' name='set_index' type='SFInt32'/>"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Group":
                      {
                        "-children":[
                          {
                            "#comment":"initial nodes are placeholders allowing inputOutput (exposedFIeld) VRML 97 Script interfaces"
                          },
                          { "Switch":
                            {
                              "@DEF":"IndexHolder",
                              "@whichChoice":-1,
                              "IS": {
                                  "connect": [
                                    {
                                      "@nodeField":"whichChoice",
                                      "@protoField":"index"
                                    }
                                  ]
                              },
                              "-children":[
                                { "TouchSensor":
                                  {
                                    "@DEF":"EnabledHolder",
                                    "@description":"placeholder node with no touch functionality",
                                    "IS": {
                                        "connect": [
                                          {
                                            "@nodeField":"enabled",
                                            "@protoField":"enabled"
                                          }
                                        ]
                                    }
                                  }
                                },
                                { "ColorInterpolator":
                                  {
                                    "@DEF":"ColorsHolder",
                                    "IS": {
                                        "connect": [
                                          {
                                            "@nodeField":"keyValue",
                                            "@protoField":"colors"
                                          }
                                        ]
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "#comment":"Script node contains all essential functionality for this prototype node"
                          },
                          { "Script":
                            {
                              "@DEF":"SequencerScript",
                              "@directOutput":true,
                              "field": [
                                {
                                  "@name":"enabledHolderNode",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFNode",
                                  "-children":[
                                    { "TouchSensor":
                                      {
                                        "@USE":"EnabledHolder"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "@name":"indexHolderNode",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFNode",
                                  "-children":[
                                    { "Switch":
                                      {
                                        "@USE":"IndexHolder"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "@name":"colorsHolderNode",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFNode",
                                  "-children":[
                                    { "ColorInterpolator":
                                      {
                                        "@USE":"ColorsHolder"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "@name":"previous",
                                  "@accessType":"inputOnly",
                                  "@type":"SFBool"
                                },
                                {
                                  "@name":"next",
                                  "@accessType":"inputOnly",
                                  "@type":"SFBool"
                                },
                                {
                                  "@name":"index",
                                  "@accessType":"inputOutput",
                                  "@type":"SFInt32",
                                  "@value":0
                                },
                                {
                                  "@name":"colors",
                                  "@accessType":"inputOutput",
                                  "@type":"MFColor"
                                },
                                {
                                  "@name":"color_changed",
                                  "@accessType":"outputOnly",
                                  "@type":"SFColor"
                                },
                                {
                                  "@name":"enabled",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFBool",
                                  "@value":true
                                },
                                {
                                  "@name":"traceEnabled",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFBool"
                                }
                              ],
                              "-children":[
                                {
                                  "#comment":"<field accessType='inputOnly' name='set_colors' type='MFColor'/>"
                                },
                                {
                                  "#comment":"<field accessType='inputOnly' name='set_index' type='SFInt32'/>"
                                }
                              ],
                              "IS": {
                                  "connect": [
                                    {
                                      "@nodeField":"previous",
                                      "@protoField":"previous"
                                    },
                                    {
                                      "@nodeField":"next",
                                      "@protoField":"next"
                                    },
                                    {
                                      "@nodeField":"index",
                                      "@protoField":"index"
                                    },
                                    {
                                      "@nodeField":"colors",
                                      "@protoField":"colors"
                                    },
                                    {
                                      "@nodeField":"color_changed",
                                      "@protoField":"color_changed"
                                    },
                                    {
                                      "@nodeField":"traceEnabled",
                                      "@protoField":"traceEnabled"
                                    }
                                  ],
                                  "-children":[
                                    {
                                      "#comment":"<connect nodeField='set_colors' protoField='set_colors'/>"
                                    },
                                    {
                                      "#comment":"<connect nodeField='set_index' protoField='set_index'/>"
                                    }
                                  ]
                              },
                              "#sourceText":[
"ecmascript:",
"",
"function tracePrint(outputString)",
"{",
"    if (traceEnabled)",
"    {",
"        Browser.print ('[ColorSequencer] ' + outputString + '\n');",
"    }",
"}",
"",
"function alwaysPrint(outputString)",
"{",
"    Browser.print ('[ColorSequencer] ' + outputString + '\n');",
"}",
"",
"function validityCheck()",
"{",
"    valid = true;",
"    // Check if index value is within allowed range",
"    if (index < 0)",
"    {",
"        alwaysPrint('*** error: index=' + index + ' less than zero, ColorSequencer ignored ***');",
"        valid = false;",
"    }",
"    if (index >= colors.length)",
"    {",
"        alwaysPrint('*** error: index=' + index + ' greater than allowed colors index range [0..' ",
"        + (colors.length-1) + '], ColorSequencer ignored ***');",
"        valid = false;",
"    }",
"    // Check color rgb values valid [0..1]",
"    if (colors[index].r < 0 || colors[index].r > 1 ",
"     || colors[index].g < 0 || colors[index].g > 1",
"     || colors[index].b < 0 || colors[index].b > 1)",
"    {",
"        alwaysPrint('*** error: colors[' + index + ']=' + colors[index] + ' value is NOT in the range of [0..1].  ColorSequencer ignored ***');",
"        valid = false;",
"    }",
"    tracePrint ('validityCheck() is ' + valid);",
"    return valid;",
"}",
"",
"function initialize()",
"{",
"    tracePrint('Initializing a new ColorSequencer...');",
"    enabled = enabledHolderNode.enabled;",
"    tracePrint('enabled=' + enabled);",
"    index = indexHolderNode.whichChoice;",
"    tracePrint('index=' + index);",
"    colors = colorsHolderNode.keyValue;",
"    tracePrint('colors.length=' + colors.length);",
"    if (colors.length > 0)",
"    {",
"        tracePrint('colors=' + colors.toString()); // Xj3D exception",
"    }",
"    if (validityCheck())",
"    {",
"        color_changed = colors[index];",
"    }",
"    else",
"    {",
"        tracePrint('initialize() did not pass validityCheck()');",
"    }",
"    return;",
"}",
"",
"function index(value, timeStamp)",
"{",
"    index = value;",
"    tracePrint('index=' + index + ', color=' + colors[index].toString());",
"    color_changed = colors[index];",
"}",
"",
"function colors(value, timeStamp)",
"{",
"    colors = value;",
"    tracePrint('colors=' + colors.toString());",
"    if (validityCheck())",
"    {",
"        color_changed = colors[index];",
"    }",
" }",
"",
"function previous (value, timeStamp)",
"{",
"    tracePrint ('previous=' + value);",
"    if (value) // only respond to true inputs",
"    {",
"            index--;",
"            if (index < 0)",
"            {",
"                index = colors.length - 1;",
"            }",
"            tracePrint ('index=' + index + ', color=' + colors[index].toString());",
"            color_changed = colors[index];",
"    }",
"}",
"function next (value, timeStamp)",
"{",
"    tracePrint ('next=' + value);",
"    if (value) // only respond to true inputs",
"    {",
"            index++;",
"            if (index >= colors.length)",
"            {",
"                index = 0;",
"            }",
"            tracePrint ('index=' + index + ', color=' + colors[index].toString());",
"            color_changed = colors[index];",
"    }",
"}"
]
                            }
                          }
                        ]
                      }
                    }
                  ]
              }
            }
          },
          {
            "#comment":"===============Example=============="
          },
          { "Background":
            {
              "@skyAngle":[0.5,0.5,0.5],
              "@skyColor":[0.5,0.5,0.5]
            }
          },
          { "Viewpoint":
            {
              "@description":"ColorSequencer prototype",
              "@position":[0,0,12]
            }
          },
          { "Anchor":
            {
              "@description":"ColorSequencer Example",
              "@url":["ColorSequencerExample.x3d","../../../Savage/Tools/Animation/ColorSequencerExample.x3d","https://savage.nps.edu/Savage/Tools/Animation/ColorSequencerExample.x3d","ColorSequencerExample.wrl","../../../Savage/Tools/Animation/ColorSequencerExample.wrl","https://savage.nps.edu/Savage/Tools/Animation/ColorSequencerExample.wrl"],
              "-children":[
                { "Shape":
                  {
                    "-geometry":
                      { "Text":
                        {
                          "@string":["ColorSequencerPrototype","defines a prototype declaration","","Click on this text to see scene","ColorSequencerExample"],
                          "-fontStyle":
                            { "FontStyle":
                              {
                                "@justify":["MIDDLE","MIDDLE"]
                              }
                            }
                        }
                      },
                    "-appearance":
                      { "Appearance":
                        {
                          "-material":
                            { "Material":
                              {
                                "@diffuseColor":[1,1,0.2]
                              }
                            }
                        }
                      }
                  }
                },
                { "Shape":
                  {
                    "-geometry":
                      { "Box":
                        {
                          "@size":[11.2,5,0.1]
                        }
                      },
                    "-appearance":
                      { "Appearance":
                        {
                          "-material":
                            { "Material":
                              {
                                "@diffuseColor":[0,0.5,0.5],
                                "@transparency":1
                              }
                            }
                        }
                      }
                  }
                }
              ]
            }
          }
        ]
    }
  }
}