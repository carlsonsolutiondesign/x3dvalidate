{ "X3D": {
    "encoding":"UTF-8",
    "@profile":"Immersive",
    "@version":"3.0",
    "@xsd:noNamespaceSchemaLocation":"http://www.web3d.org/specifications/x3d-3.0.xsd",
    "JSON schema":"http://www.web3d.org/specifications/x3d-3.3-JSONSchema.json",
    "head": {
        "meta": [
          {
            "@name":"title",
            "@content":"FilterPrototypes.x3d"
          },
          {
            "@name":"description",
            "@content":"Contains prototypes that filter multiple values/events to extract a single value/event."
          },
          {
            "@name":"creator",
            "@content":"Don Brutzman, James Harney, Jane Wu"
          },
          {
            "@name":"created",
            "@content":"18 December 2001"
          },
          {
            "@name":"modified",
            "@content":"14 January 2014"
          },
          {
            "@name":"version",
            "@content":"1.0"
          },
          {
            "@name":"subject",
            "@content":"event filter"
          },
          {
            "@name":"identifier",
            "@content":"https://savage.nps.edu/Savage/Tools/Authoring/FilterPrototypes.x3d"
          },
          {
            "@name":"generator",
            "@content":"X3D-Edit 3.2, https://savage.nps.edu/X3D-Edit"
          },
          {
            "@name":"license",
            "@content":"../../license.html"
          },
          {
            "@name":"translated",
            "@content":"19 March 2017"
          },
          {
            "@name":"generator",
            "@content":"X3dToJson.xslt, http://www.web3d.org/x3d/stylesheets/X3dToJson.html"
          },
          {
            "@name":"warning",
            "@content":"An experimental version of X3D JSON encoding is used for this scene.  Status online at http://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
          }
        ]
    },
    "Scene": {
        "-children":[
          { "ProtoDeclare":
            {
              "@name":"FilterBooleanPassTrueEvents",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"setBoolean",
                      "@accessType":"inputOnly",
                      "@type":"SFBool"
                    },
                    {
                      "@name":"trueEventOut",
                      "@accessType":"outputOnly",
                      "@type":"SFBool"
                    },
                    {
                      "@name":"trueEventTime",
                      "@accessType":"outputOnly",
                      "@type":"SFTime"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Script":
                      {
                        "@DEF":"PassTrueScript",
                        "field": [
                          {
                            "@name":"setBoolean",
                            "@accessType":"inputOnly",
                            "@type":"SFBool"
                          },
                          {
                            "@name":"trueEventOut",
                            "@accessType":"outputOnly",
                            "@type":"SFBool"
                          },
                          {
                            "@name":"trueEventTime",
                            "@accessType":"outputOnly",
                            "@type":"SFTime"
                          }
                        ],
                        "IS": {
                            "connect": [
                              {
                                "@nodeField":"setBoolean",
                                "@protoField":"setBoolean"
                              },
                              {
                                "@nodeField":"trueEventOut",
                                "@protoField":"trueEventOut"
                              },
                              {
                                "@nodeField":"trueEventTime",
                                "@protoField":"trueEventTime"
                              }
                            ]
                        },
                        "#sourceText":[
"ecmascript:",
"",
"function setBoolean (value, timeStamp)",
"{",
"\tif (value == true)",
"\t{",
"\t\ttrueEventOut = value;",
"\t\ttrueEventTime = timeStamp;",
"\t}",
"}"
]
                      }
                    }
                  ]
              }
            }
          },
          { "ProtoDeclare":
            {
              "@name":"FilterBooleanPassFalseEvents",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"setBoolean",
                      "@accessType":"inputOnly",
                      "@type":"SFBool"
                    },
                    {
                      "@name":"falseEventOut",
                      "@accessType":"outputOnly",
                      "@type":"SFBool"
                    },
                    {
                      "@name":"falseEventTime",
                      "@accessType":"outputOnly",
                      "@type":"SFTime"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Script":
                      {
                        "@DEF":"PassFalseScript",
                        "field": [
                          {
                            "@name":"setBoolean",
                            "@accessType":"inputOnly",
                            "@type":"SFBool"
                          },
                          {
                            "@name":"falseEventOut",
                            "@accessType":"outputOnly",
                            "@type":"SFBool"
                          },
                          {
                            "@name":"falseEventTime",
                            "@accessType":"outputOnly",
                            "@type":"SFTime"
                          }
                        ],
                        "IS": {
                            "connect": [
                              {
                                "@nodeField":"setBoolean",
                                "@protoField":"setBoolean"
                              },
                              {
                                "@nodeField":"falseEventOut",
                                "@protoField":"falseEventOut"
                              },
                              {
                                "@nodeField":"falseEventTime",
                                "@protoField":"falseEventTime"
                              }
                            ]
                        },
                        "#sourceText":[
"ecmascript:",
"",
"function setBoolean (value, timeStamp)",
"{",
"\tif (value == false)",
"\t{",
"\t\tfalseEventOut = value;",
"\t\tfalseEventTime = timeStamp;",
"\t}",
"}"
]
                      }
                    }
                  ]
              }
            }
          },
          { "ProtoDeclare":
            {
              "@name":"FilterIntegersPassSingleInteger",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"integerIndex",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Index of the integer in the integer array to be extracted. Defaulted to 0.",
                      "@type":"SFInt32",
                      "@value":0
                    },
                    {
                      "@name":"setIntegers",
                      "@accessType":"inputOnly",
                      "@type":"MFInt32"
                    },
                    {
                      "@name":"integerOut",
                      "@accessType":"outputOnly",
                      "@type":"SFInt32"
                    },
                    {
                      "@name":"integerOutTime",
                      "@accessType":"outputOnly",
                      "@type":"SFTime"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Script":
                      {
                        "@DEF":"PassIntegerScript",
                        "field": [
                          {
                            "@name":"integerIndex",
                            "@accessType":"initializeOnly",
                            "@type":"SFInt32"
                          },
                          {
                            "@name":"setIntegers",
                            "@accessType":"inputOnly",
                            "@type":"MFInt32"
                          },
                          {
                            "@name":"integerOut",
                            "@accessType":"outputOnly",
                            "@type":"SFInt32"
                          },
                          {
                            "@name":"integerOutTime",
                            "@accessType":"outputOnly",
                            "@type":"SFTime"
                          }
                        ],
                        "IS": {
                            "connect": [
                              {
                                "@nodeField":"integerIndex",
                                "@protoField":"integerIndex"
                              },
                              {
                                "@nodeField":"setIntegers",
                                "@protoField":"setIntegers"
                              },
                              {
                                "@nodeField":"integerOut",
                                "@protoField":"integerOut"
                              },
                              {
                                "@nodeField":"integerOutTime",
                                "@protoField":"integerOutTime"
                              }
                            ]
                        },
                        "#sourceText":[
"ecmascript:",
"",
"function setIntegers (value, timeStamp)",
"{",
"\tif (integerIndex < 0)",
"\t\treturn;",
"",
"\tintegerOut = value[integerIndex];",
"\tintegerOutTime = timeStamp;",
"}"
]
                      }
                    }
                  ]
              }
            }
          },
          { "ProtoDeclare":
            {
              "@name":"FilterFloatsPassSingleFloat",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"floatIndex",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Index of the float in the float array to be extracted. Defaulted to 0.",
                      "@type":"SFInt32",
                      "@value":0
                    },
                    {
                      "@name":"setFloats",
                      "@accessType":"inputOnly",
                      "@type":"MFFloat"
                    },
                    {
                      "@name":"floatOut",
                      "@accessType":"outputOnly",
                      "@type":"SFFloat"
                    },
                    {
                      "@name":"floatOutTime",
                      "@accessType":"outputOnly",
                      "@type":"SFTime"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Script":
                      {
                        "@DEF":"PassFloatScript",
                        "field": [
                          {
                            "@name":"floatIndex",
                            "@accessType":"initializeOnly",
                            "@type":"SFInt32"
                          },
                          {
                            "@name":"setFloats",
                            "@accessType":"inputOnly",
                            "@type":"MFFloat"
                          },
                          {
                            "@name":"floatOut",
                            "@accessType":"outputOnly",
                            "@type":"SFFloat"
                          },
                          {
                            "@name":"floatOutTime",
                            "@accessType":"outputOnly",
                            "@type":"SFTime"
                          }
                        ],
                        "IS": {
                            "connect": [
                              {
                                "@nodeField":"floatIndex",
                                "@protoField":"floatIndex"
                              },
                              {
                                "@nodeField":"setFloats",
                                "@protoField":"setFloats"
                              },
                              {
                                "@nodeField":"floatOut",
                                "@protoField":"floatOut"
                              },
                              {
                                "@nodeField":"floatOutTime",
                                "@protoField":"floatOutTime"
                              }
                            ]
                        },
                        "#sourceText":[
"ecmascript:",
"",
"function setFloats (value, timeStamp)",
"{",
"\tif (floatIndex < 0)",
"\t\treturn;",
"",
"\tfloatOut = value[floatIndex];",
"\tfloatOutTime = timeStamp;",
"}"
]
                      }
                    }
                  ]
              }
            }
          },
          { "ProtoDeclare":
            {
              "@name":"FilterStringsPassSingleString",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"stringIndex",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Index of the string in the string array to be extracted. Defaulted to 0.",
                      "@type":"SFInt32",
                      "@value":0
                    },
                    {
                      "@name":"setStrings",
                      "@accessType":"inputOnly",
                      "@type":"MFString"
                    },
                    {
                      "@name":"stringOut",
                      "@accessType":"outputOnly",
                      "@type":"SFString"
                    },
                    {
                      "@name":"stringOutTime",
                      "@accessType":"outputOnly",
                      "@type":"SFTime"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Script":
                      {
                        "@DEF":"PassStringScript",
                        "field": [
                          {
                            "@name":"stringIndex",
                            "@accessType":"initializeOnly",
                            "@type":"SFInt32"
                          },
                          {
                            "@name":"setStrings",
                            "@accessType":"inputOnly",
                            "@type":"MFString"
                          },
                          {
                            "@name":"stringOut",
                            "@accessType":"outputOnly",
                            "@type":"SFString"
                          },
                          {
                            "@name":"stringOutTime",
                            "@accessType":"outputOnly",
                            "@type":"SFTime"
                          }
                        ],
                        "IS": {
                            "connect": [
                              {
                                "@nodeField":"stringIndex",
                                "@protoField":"stringIndex"
                              },
                              {
                                "@nodeField":"setStrings",
                                "@protoField":"setStrings"
                              },
                              {
                                "@nodeField":"stringOut",
                                "@protoField":"stringOut"
                              },
                              {
                                "@nodeField":"stringOutTime",
                                "@protoField":"stringOutTime"
                              }
                            ]
                        },
                        "#sourceText":[
"ecmascript:",
"",
"function setStrings (value, timeStamp)",
"{",
"\tif (stringIndex < 0)",
"\t\treturn;",
"",
"\tstringOut = value[stringIndex];",
"\tstringOutTime = timeStamp;",
"}"
]
                      }
                    }
                  ]
              }
            }
          },
          {
            "#comment":"===================="
          },
          { "Anchor":
            {
              "@description":"FilterExamples",
              "@parameter":["target=_blank"],
              "@url":["FilterExamples.wrl","https://savage.nps.edu/Savage/Tools/Authoring/FilterExamples.wrl","FilterExamples.x3d","https://savage.nps.edu/Savage/Tools/Authoring/FilterExamples.x3d"],
              "-children":[
                { "Shape":
                  {
                    "-appearance":
                      { "Appearance":
                        {
                          "-material":
                            { "Material":
                              {
                                "@diffuseColor":[0,1,1],
                                "@emissiveColor":[0,1,1]
                              }
                            }
                        }
                      },
                    "-geometry":
                      { "Text":
                        {
                          "@string":["FilterPrototypes.wrl","is a Prototype definition file.","","To see an example scene","using these new nodes","click this text and view","FilterExamples.wrl"],
                          "-fontStyle":
                            { "FontStyle":
                              {
                                "@justify":["MIDDLE","MIDDLE"],
                                "@size":0.8
                              }
                            }
                        }
                      }
                  }
                }
              ]
            }
          }
        ]
    }
  }
}