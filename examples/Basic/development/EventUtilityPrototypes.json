{ "X3D": {
    "encoding":"UTF-8",
    "@profile":"Immersive",
    "@version":"3.0",
    "@xsd:noNamespaceSchemaLocation":"http://www.web3d.org/specifications/x3d-3.0.xsd",
    "JSON schema":"http://www.web3d.org/specifications/x3d-3.3-JSONSchema.json",
    "head": {
        "meta": [
          {
            "@name":"title",
            "@content":"EventUtilityPrototypes.x3d"
          },
          {
            "@name":"description",
            "@content":"Event utility node prototypes for boolean filtering and other event utility nodes."
          },
          {
            "@name":"creator",
            "@content":"Nick Polys, Tony Parisi, Don Brutzman, Justin Couch"
          },
          {
            "@name":"created",
            "@content":"25 September 2002"
          },
          {
            "@name":"modified",
            "@content":"13 January 2014"
          },
          {
            "@name":"warning",
            "@content":"Under development, IntegerTrigger example needed."
          },
          {
            "@name":"reference",
            "@content":"EventUtilityExamples.x3d"
          },
          {
            "@name":"subject",
            "@content":"BooleanFilter BooleanToggle BooleanTrigger IntegerTrigger TimeTrigger"
          },
          {
            "@name":"identifier",
            "@content":"http://www.web3d.org/x3d/content/examples/Basic/development/EventUtilityPrototypes.x3d"
          },
          {
            "@name":"generator",
            "@content":"X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
          },
          {
            "@name":"license",
            "@content":"../license.html"
          },
          {
            "@name":"translated",
            "@content":"19 March 2017"
          },
          {
            "@name":"generator",
            "@content":"X3dToJson.xslt, http://www.web3d.org/x3d/stylesheets/X3dToJson.html"
          },
          {
            "@name":"warning",
            "@content":"An experimental version of X3D JSON encoding is used for this scene.  Status online at http://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
          }
        ]
    },
    "Scene": {
        "-children":[
          { "ProtoDeclare":
            {
              "@name":"BooleanFilter",
              "@appinfo":"BooleanFilter selectively passes true false or negated events.",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"set_boolean",
                      "@accessType":"inputOnly",
                      "@appinfo":"set_boolean is the input value to be filtered.",
                      "@type":"SFBool"
                    },
                    {
                      "@name":"inputTrue",
                      "@accessType":"outputOnly",
                      "@appinfo":"inputTrue only passes a true value when set_boolean input is true.",
                      "@type":"SFBool"
                    },
                    {
                      "@name":"inputFalse",
                      "@accessType":"outputOnly",
                      "@appinfo":"inputFalse only passes a false value when set_boolean is false.",
                      "@type":"SFBool"
                    },
                    {
                      "@name":"inputNegate",
                      "@accessType":"outputOnly",
                      "@appinfo":"inputNegate provides opposite value by negating set_boolean input.",
                      "@type":"SFBool"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Script":
                      {
                        "@DEF":"BooleanFilterScript",
                        "field": [
                          {
                            "@name":"set_boolean",
                            "@accessType":"inputOnly",
                            "@type":"SFBool"
                          },
                          {
                            "@name":"inputTrue",
                            "@accessType":"outputOnly",
                            "@type":"SFBool"
                          },
                          {
                            "@name":"inputFalse",
                            "@accessType":"outputOnly",
                            "@type":"SFBool"
                          },
                          {
                            "@name":"inputNegate",
                            "@accessType":"outputOnly",
                            "@type":"SFBool"
                          }
                        ],
                        "IS": {
                            "connect": [
                              {
                                "@nodeField":"set_boolean",
                                "@protoField":"set_boolean"
                              },
                              {
                                "@nodeField":"inputTrue",
                                "@protoField":"inputTrue"
                              },
                              {
                                "@nodeField":"inputFalse",
                                "@protoField":"inputFalse"
                              },
                              {
                                "@nodeField":"inputNegate",
                                "@protoField":"inputNegate"
                              }
                            ]
                        },
                        "#sourceText":[
"ecmascript:",
"",
"function set_boolean (value, timestamp)",
"{",
"\tif (value) inputTrue  = value;",
"\telse       inputFalse = value;",
"\tinputNegate = !value;",
"",
"//\tif (value) Browser.print ('[BooleanFilter] set_boolean=' + value + ', inputTrue='  + inputTrue  + ', inputNegate=' + inputNegate);",
"//\telse       Browser.print ('[BooleanFilter] set_boolean=' + value + ', inputFalse=' + inputFalse + ', inputNegate=' + inputNegate);",
"}"
]
                      }
                    }
                  ]
              }
            }
          },
          {
            "#comment":"========================================"
          },
          { "ProtoDeclare":
            {
              "@name":"BooleanToggle",
              "@appinfo":"BooleanToggle maintains state and negates output when a true input is provided.",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"set_boolean",
                      "@accessType":"inputOnly",
                      "@appinfo":"If set_boolean input is true toggle state.",
                      "@type":"SFBool"
                    },
                    {
                      "@name":"set_toggle",
                      "@accessType":"inputOnly",
                      "@appinfo":"Reset persistent state value.",
                      "@type":"SFBool"
                    },
                    {
                      "@name":"toggle",
                      "@accessType":"initializeOnly",
                      "@appinfo":"Persistent state value that gets toggled or reset.",
                      "@type":"SFBool",
                      "@value":false
                    },
                    {
                      "@name":"toggle_changed",
                      "@accessType":"outputOnly",
                      "@appinfo":"Output toggled persistent state value.",
                      "@type":"SFBool"
                    }
                  ],
                  "-children":[
                    {
                      "#comment":"warning: toggle depends on exposedField functionality in Script node, not compatible with VRML 97. implemented as inputOnly/initializeOnly/outputOnly triplet."
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Group":
                      {
                        "-children":[
                          { "Script":
                            {
                              "@DEF":"BooleanToggleScript",
                              "field": [
                                {
                                  "@name":"set_boolean",
                                  "@accessType":"inputOnly",
                                  "@type":"SFBool"
                                },
                                {
                                  "@name":"set_toggle",
                                  "@accessType":"inputOnly",
                                  "@type":"SFBool"
                                },
                                {
                                  "@name":"toggle",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFBool",
                                  "@value":false
                                },
                                {
                                  "@name":"toggle_changed",
                                  "@accessType":"outputOnly",
                                  "@type":"SFBool"
                                },
                                {
                                  "@name":"traceEnabled",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFBool",
                                  "@value":false
                                }
                              ],
                              "IS": {
                                  "connect": [
                                    {
                                      "@nodeField":"set_boolean",
                                      "@protoField":"set_boolean"
                                    },
                                    {
                                      "@nodeField":"set_toggle",
                                      "@protoField":"set_toggle"
                                    },
                                    {
                                      "@nodeField":"toggle_changed",
                                      "@protoField":"toggle_changed"
                                    }
                                  ]
                              },
                              "#sourceText":[
"ecmascript:",
"",
"function initialize ()",
"{",
"\tif (traceEnabled) Browser.print ('[BooleanToggle] toggle=' + toggle);",
"",
"}",
"function set_boolean (value, timestamp)",
"{",
"\tif (value == true)  // only toggle on true input",
"\t{",
"\t\tif (toggle == true) toggle = false;",
"\t\telse                toggle = true;",
"\t}",
"\ttoggle_changed = toggle;",
"//\tBrowser.print ('[BooleanToggle] traceEnabled=' + traceEnabled);",
"\tif (traceEnabled) Browser.print ('[BooleanToggle] set_boolean=' + value + ', toggle=' + toggle);",
"}",
"function set_toggle (value, timestamp)",
"{",
"\ttoggle = value;",
"\ttoggle_changed = toggle;",
"\tif (traceEnabled) Browser.print ('[BooleanToggle] set_toggle=' + set_toggle);",
"}"
]
                            }
                          }
                        ]
                      }
                    }
                  ]
              }
            }
          },
          {
            "#comment":"========================================"
          },
          { "ProtoDeclare":
            {
              "@name":"BooleanTrigger",
              "@appinfo":"BooleanTrigger converts time events to boolean true events.",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"set_triggerTime",
                      "@accessType":"inputOnly",
                      "@appinfo":"set_triggerTime provides input time event typical event sent is TouchSensor touchTime.",
                      "@type":"SFTime"
                    },
                    {
                      "@name":"triggerTrue",
                      "@accessType":"outputOnly",
                      "@appinfo":"triggerTrue outputs a true value whenever a triggerTime event is received.",
                      "@type":"SFBool"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Script":
                      {
                        "@DEF":"TriggerBooleanScript",
                        "field": [
                          {
                            "@name":"set_triggerTime",
                            "@accessType":"inputOnly",
                            "@type":"SFTime"
                          },
                          {
                            "@name":"triggerTrue",
                            "@accessType":"outputOnly",
                            "@type":"SFBool"
                          }
                        ],
                        "IS": {
                            "connect": [
                              {
                                "@nodeField":"set_triggerTime",
                                "@protoField":"set_triggerTime"
                              },
                              {
                                "@nodeField":"triggerTrue",
                                "@protoField":"triggerTrue"
                              }
                            ]
                        },
                        "#sourceText":[
"ecmascript:",
"",
"function set_triggerTime (value, timestamp)",
"{",
"\ttriggerTrue = true;",
"//\tBrowser.print ('triggerTrue = true');",
"}"
]
                      }
                    }
                  ]
              }
            }
          },
          {
            "#comment":"========================================"
          },
          { "ProtoDeclare":
            {
              "@name":"IntegerTrigger",
              "@appinfo":"IntegerTrigger converts boolean true or time input events to integer value (suitable for Switch node).",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"set_boolean",
                      "@accessType":"inputOnly",
                      "@appinfo":"If set_boolean input is true trigger output of integer value.",
                      "@type":"SFBool"
                    },
                    {
                      "@name":"set_integerKey",
                      "@accessType":"inputOnly",
                      "@appinfo":"Resets value used for output when triggered later.",
                      "@type":"SFInt32"
                    },
                    {
                      "@name":"integerKey",
                      "@accessType":"inputOutput",
                      "@appinfo":"integerKey is value for output when triggered.",
                      "@type":"SFInt32",
                      "@value":-1
                    },
                    {
                      "@name":"integerKey_changed",
                      "@accessType":"outputOnly",
                      "@appinfo":"Reports change in integerKey value.",
                      "@type":"SFInt32"
                    },
                    {
                      "@name":"triggerValue",
                      "@accessType":"outputOnly",
                      "@appinfo":"triggerValue provides integer event output matching integerKey when true set_boolean received.",
                      "@type":"SFInt32"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Group":
                      {
                        "-children":[
                          { "Switch":
                            {
                              "@DEF":"IntegerKeyHolder",
                              "@whichChoice":-1,
                              "IS": {
                                  "connect": [
                                    {
                                      "@nodeField":"whichChoice",
                                      "@protoField":"integerKey"
                                    }
                                  ]
                              }
                            }
                          },
                          { "Script":
                            {
                              "@DEF":"TriggerIntegerScript",
                              "@directOutput":true,
                              "field": [
                                {
                                  "@name":"set_boolean",
                                  "@accessType":"inputOnly",
                                  "@type":"SFBool"
                                },
                                {
                                  "@name":"set_integerKey",
                                  "@accessType":"inputOnly",
                                  "@type":"SFInt32"
                                },
                                {
                                  "@name":"integerKeyHolderNode",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFNode",
                                  "-children":[
                                    { "Switch":
                                      {
                                        "@USE":"IntegerKeyHolder"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "@name":"integerKey_changed",
                                  "@accessType":"outputOnly",
                                  "@type":"SFInt32"
                                },
                                {
                                  "@name":"triggerValue",
                                  "@accessType":"outputOnly",
                                  "@type":"SFInt32"
                                }
                              ],
                              "IS": {
                                  "connect": [
                                    {
                                      "@nodeField":"set_boolean",
                                      "@protoField":"set_boolean"
                                    },
                                    {
                                      "@nodeField":"set_integerKey",
                                      "@protoField":"set_integerKey"
                                    },
                                    {
                                      "@nodeField":"integerKey_changed",
                                      "@protoField":"integerKey_changed"
                                    },
                                    {
                                      "@nodeField":"triggerValue",
                                      "@protoField":"triggerValue"
                                    }
                                  ]
                              },
                              "#sourceText":[
"ecmascript:",
"",
"function set_boolean (inputValue, timestamp)",
"{",
"\tif (inputValue == true)",
"\t{",
"\t\tintegerKey = integerKeyHolderNode.whichChoice;",
"\t\ttriggerValue = integerKey; // send output event",
"\t}",
"}",
"function set_integerKey (inputValue, timestamp)",
"{",
"\tintegerKey = inputValue;",
"\tintegerKeyHolderNode.whichChoice = integerKey;",
"\tintegerKey_changed = integerKey; // send output event",
"}"
]
                            }
                          }
                        ]
                      }
                    }
                  ]
              }
            }
          },
          {
            "#comment":"========================================"
          },
          { "ProtoDeclare":
            {
              "@name":"TimeTrigger",
              "@appinfo":"TimeTrigger converts boolean true events to time events.",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"set_boolean",
                      "@accessType":"inputOnly",
                      "@appinfo":"If set_boolean input is true trigger output time value.",
                      "@type":"SFBool"
                    },
                    {
                      "@name":"triggerTime",
                      "@accessType":"outputOnly",
                      "@appinfo":"triggerTime is output time event sent when set_boolean input is true.",
                      "@type":"SFTime"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Script":
                      {
                        "@DEF":"TriggerTimeScript",
                        "field": [
                          {
                            "@name":"set_boolean",
                            "@accessType":"inputOnly",
                            "@type":"SFBool"
                          },
                          {
                            "@name":"triggerTime",
                            "@accessType":"outputOnly",
                            "@type":"SFTime"
                          }
                        ],
                        "IS": {
                            "connect": [
                              {
                                "@nodeField":"set_boolean",
                                "@protoField":"set_boolean"
                              },
                              {
                                "@nodeField":"triggerTime",
                                "@protoField":"triggerTime"
                              }
                            ]
                        },
                        "#sourceText":[
"ecmascript:",
"",
"function set_boolean (value, timestamp)",
"{",
"\tif (value) triggerTime = timestamp;",
"}"
]
                      }
                    }
                  ]
              }
            }
          },
          {
            "#comment":"========================================"
          },
          { "Anchor":
            {
              "@description":"EventUtilityExamples",
              "@parameter":["target=_blank"],
              "@url":["EventUtilityExamples.x3d","http://www.web3d.org/x3d/content/examples/Basic/development/EventUtilityExamples.x3d","EventUtilityExamples.wrl","http://www.web3d.org/x3d/content/examples/Basic/development/EventUtilityExamples.wrl"],
              "-children":[
                { "Shape":
                  {
                    "-geometry":
                      { "Text":
                        {
                          "@string":["EventUtilityPrototype","defines prototypes","","Click text to see","EventUtilityExamples"],
                          "-fontStyle":
                            { "FontStyle":
                              {
                                "@justify":["MIDDLE","MIDDLE"],
                                "@size":0.9
                              }
                            }
                        }
                      },
                    "-appearance":
                      { "Appearance":
                        {
                          "-material":
                            { "Material":
                              {
                                "@diffuseColor":[1,1,0.2]
                              }
                            }
                        }
                      }
                  }
                }
              ]
            }
          }
        ]
    }
  }
}