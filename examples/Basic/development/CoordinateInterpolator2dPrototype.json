{ "X3D": {
    "encoding":"UTF-8",
    "@profile":"Immersive",
    "@version":"3.0",
    "@xsd:noNamespaceSchemaLocation":"http://www.web3d.org/specifications/x3d-3.0.xsd",
    "JSON schema":"http://www.web3d.org/specifications/x3d-3.3-JSONSchema.json",
    "head": {
        "meta": [
          {
            "@name":"title",
            "@content":"CoordinateInterpolator2dPrototype.x3d"
          },
          {
            "@name":"description",
            "@content":"CoordinateInterpolator2D prototype declaration, to interpolate across an array of Vector2FloatArray/MFVec2f values to produce an interpolated Vector2FloatArray - click text to see example."
          },
          {
            "@name":"creator",
            "@content":"Don Brutzman, Jeff Weekley, Jane Wu"
          },
          {
            "@name":"created",
            "@content":"28 June 2001"
          },
          {
            "@name":"modified",
            "@content":"12 January 2014"
          },
          {
            "@name":"reference",
            "@content":"http://www.web3d.org/technicalinfo/specifications/vrml97/part1/concepts.html#4.6.8"
          },
          {
            "@name":"reference",
            "@content":"http://www.web3d.org/technicalinfo/specifications/vrml97/part1/nodesRef.html#CoordinateInterpolator"
          },
          {
            "@name":"subject",
            "@content":"CoordinateInterpolator2D"
          },
          {
            "@name":"identifier",
            "@content":"http://www.web3d.org/x3d/content/examples/Basic/development/CoordinateInterpolator2dPrototype.x3d"
          },
          {
            "@name":"generator",
            "@content":"X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
          },
          {
            "@name":"license",
            "@content":"../license.html"
          },
          {
            "@name":"translated",
            "@content":"19 March 2017"
          },
          {
            "@name":"generator",
            "@content":"X3dToJson.xslt, http://www.web3d.org/x3d/stylesheets/X3dToJson.html"
          },
          {
            "@name":"warning",
            "@content":"An experimental version of X3D JSON encoding is used for this scene.  Status online at http://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
          }
        ]
    },
    "Scene": {
        "-children":[
          { "ProtoDeclare":
            {
              "@name":"CoordinateInterpolator2D",
              "@appinfo":"Provide interpolation capability for Vector2FloatArray/MFVec2f values",
              "@documentation":"http://www.web3d.org/technicalinfo/specifications/vrml97/part1/concepts.html#4.6.8",
              "ProtoInterface": {
                  "-children":[
                    {
                      "#comment":"Regular interpolator-style input"
                    },
                    {
                      "#comment":"Regular interpolator-style output"
                    }
                  ],
                  "field": [
                    {
                      "@name":"set_fraction",
                      "@accessType":"inputOnly",
                      "@appinfo":"The set_fraction eventIn receives an SFFloat event and causes the interpolator function to evaluate resulting in a value_changed eventOut with the same timestamp as the set_fraction event.",
                      "@type":"SFFloat"
                    },
                    {
                      "@name":"set_key",
                      "@accessType":"inputOnly",
                      "@type":"MFFloat"
                    },
                    {
                      "@name":"key",
                      "@accessType":"inputOutput",
                      "@appinfo":"keyValue holds the array of Vector2FloatArrays that match each animation key.",
                      "@type":"MFFloat"
                    },
                    {
                      "@name":"key_changed",
                      "@accessType":"outputOnly",
                      "@appinfo":"Array sequentially increasing typically [0..1]. Must have the same number of keys as keyValues.",
                      "@type":"MFFloat"
                    },
                    {
                      "@name":"set_keyValue",
                      "@accessType":"inputOnly",
                      "@appinfo":"Array of integer values. Must have the same number of keys as keyValues.",
                      "@type":"MFVec2f"
                    },
                    {
                      "@name":"keyValue",
                      "@accessType":"inputOutput",
                      "@appinfo":"keyValue holds the array of Vector2FloatArrays that match each animation key.",
                      "@type":"MFVec2f"
                    },
                    {
                      "@name":"keyValue_changed",
                      "@accessType":"outputOnly",
                      "@appinfo":"Array of integer values. Must have the same number of keys as keyValues.",
                      "@type":"MFVec2f"
                    },
                    {
                      "@name":"value_changed",
                      "@accessType":"outputOnly",
                      "@appinfo":"The interpolator function averages between respective keyValue Vector2FloatArrays resulting in a Vector2FloatArray value_changed eventOut with the same timestamp as the set_fraction event.",
                      "@type":"MFVec2f"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Group":
                      {
                        "-children":[
                          { "Switch":
                            {
                              "@whichChoice":-1,
                              "-children":[
                                { "ScalarInterpolator":
                                  {
                                    "@DEF":"KeyHolder",
                                    "IS": {
                                        "connect": [
                                          {
                                            "@nodeField":"key",
                                            "@protoField":"key"
                                          }
                                        ]
                                    }
                                  }
                                },
                                { "Shape":
                                  {
                                    "-geometry":
                                      { "IndexedFaceSet":
                                        {
                                          "-texCoord":
                                            { "TextureCoordinate":
                                              {
                                                "@DEF":"KeyValueHolder",
                                                "IS": {
                                                    "connect": [
                                                      {
                                                        "@nodeField":"point",
                                                        "@protoField":"keyValue"
                                                      }
                                                    ]
                                                }
                                              }
                                            }
                                        }
                                      },
                                    "-appearance":
                                      { "Appearance":
                                        {
                                          "@DEF":"DefaultAppearance",
                                          "-material":
                                            { "Material":
                                              {
                                              }
                                            }
                                        }
                                      }
                                  }
                                }
                              ]
                            }
                          },
                          { "Script":
                            {
                              "@DEF":"InterpolationScript",
                              "@directOutput":true,
                              "field": [
                                {
                                  "@name":"set_fraction",
                                  "@accessType":"inputOnly",
                                  "@type":"SFFloat"
                                },
                                {
                                  "@name":"fraction",
                                  "@accessType":"initializeOnly",
                                  "@appinfo":"local variable",
                                  "@type":"SFFloat",
                                  "@value":0.0
                                },
                                {
                                  "@name":"set_key",
                                  "@accessType":"inputOnly",
                                  "@type":"MFFloat"
                                },
                                {
                                  "@name":"keyHolderNode",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFNode",
                                  "-children":[
                                    { "ScalarInterpolator":
                                      {
                                        "@USE":"KeyHolder"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "@name":"key_changed",
                                  "@accessType":"outputOnly",
                                  "@type":"MFFloat"
                                },
                                {
                                  "@name":"set_keyValue",
                                  "@accessType":"inputOnly",
                                  "@type":"MFVec2f"
                                },
                                {
                                  "@name":"keyValueHolderNode",
                                  "@accessType":"initializeOnly",
                                  "@type":"SFNode",
                                  "-children":[
                                    { "TextureCoordinate":
                                      {
                                        "@USE":"KeyValueHolder"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "@name":"keyValue_changed",
                                  "@accessType":"outputOnly",
                                  "@type":"MFVec2f"
                                },
                                {
                                  "@name":"value_changed",
                                  "@accessType":"outputOnly",
                                  "@type":"MFVec2f"
                                }
                              ],
                              "IS": {
                                  "connect": [
                                    {
                                      "@nodeField":"set_fraction",
                                      "@protoField":"set_fraction"
                                    },
                                    {
                                      "@nodeField":"set_key",
                                      "@protoField":"set_key"
                                    },
                                    {
                                      "@nodeField":"key_changed",
                                      "@protoField":"key_changed"
                                    },
                                    {
                                      "@nodeField":"set_keyValue",
                                      "@protoField":"set_keyValue"
                                    },
                                    {
                                      "@nodeField":"keyValue_changed",
                                      "@protoField":"keyValue_changed"
                                    },
                                    {
                                      "@nodeField":"value_changed",
                                      "@protoField":"value_changed"
                                    }
                                  ]
                              },
                              "#sourceText":[
"ecmascript:",
"",
"// internal global persistent variables",
"var previousFraction;",
"var previousFractionIndex;",
"var blockSize;",
"var outputArray;",
"",
"function tracePrint (outputString)",
"{",
"\tvar traceEnabled = false;",
"\tif (traceEnabled) Browser.print ('[CoordinateInterpolator2D]' + outputString);",
"}",
"function alwaysPrint (outputString)",
"{",
"\tBrowser.print ('[CoordinateInterpolator2D]' + outputString);",
"}",
"function initialize ()",
"{",
"\tkey      = keyHolderNode.key;",
"\tkeyValue = keyValueHolderNode.point;",
"\tpreviousFractionIndex = -1;",
"\tpreviousFraction = 0;",
"\t// check key array ranges [0..1] and is monotonically increasing",
"\t// check that size of keyValue array is integer multiple of size of key array",
"\ttracePrint ('key            =' + key);",
"\ttracePrint ('key.length= ' + key.length);",
"\ttracePrint ('keyValue=   ' + keyValue);",
"\ttracePrint ('keyValue.length=' + keyValue.length);",
"\tblockSize =  keyValue.length/key.length;",
"\ttracePrint ('blockSize=' + blockSize);",
"\tif (blockSize != Math.round(blockSize))",
"\t{",
"\t  alwaysPrint ('*** warning:  blockSize not an integer multiple. check sizes of key and keyValue');",
"\t}",
"\tif (key[0] != 0)",
"\t{",
"\t  alwaysPrint ('*** warning:  key[0] != 0');",
"\t}",
"\tif (key[key.length-1] != 1)",
"\t{",
"\t  alwaysPrint ('*** warning:  key[' + (key.length - 1) + '] != 1, reset from' + key[key.length-1] + ' to 1');",
"\t  key[key.length-1] = 1;",
"\t}",
"\tfor (index = 0; index < blockSize; index++)",
"\t{",
"\t\tif ((key[index] < 0) || (key[index] > 1))",
"\t\t{",
"\t\t   alwaysPrint ('*** warning:  key[' + index + '] =' + key[index] + ', out of range [0..1]');",
"\t\t}",
"\t}",
"\t// instantiate default array, later computations just update it",
"\toutputArray = new MFVec2f ();",
"\tfor (index = 0; index < blockSize; index++)",
"\t{",
"\t\t// dynamically grow outputArray to match initial block",
"\t\toutputArray[index] = keyValue[index];",
"\t}",
"\ttracePrint ('initial outputArray=' + outputArray);",
"}",
"",
"function set_fraction (inputFloat, timestamp) {",
"\tfraction = inputFloat;",
"\ttracePrint ('previousFractionIndex=' + previousFractionIndex",
"\t\t + ', fraction=' + fraction + ', previousFraction=' + previousFraction);",
"",
"\tif (fraction < 0)",
"\t{",
"\t\ttracePrint ('*** illegal fraction' + fraction + ' set to 0');",
"\t\tfraction = 0;",
"\t\tpreviousFractionIndex = 0; // first",
"\t}",
"\telse if (fraction > 1)",
"\t{",
"\t\talwaysPrint ('*** illegal fraction' + fraction + ' set to 1');",
"\t\tfraction = 1;",
"\t\tpreviousFractionIndex = blockSize - 1; // last",
"\t}",
"\telse if (previousFractionIndex == -1)",
"\t{",
"\t\tpreviousFractionIndex = 0; // first",
"\t\ttracePrint ('previousFractionIndex initialized for first event');",
"\t}",
"\telse if ((fraction >= previousFraction) && (fraction >= key[previousFractionIndex+1]))",
"\t{",
"\t\tpreviousFractionIndex++;",
"\t}",
"\telse if (fraction < previousFraction) // regress, or loop repeat without reaching one",
"\t{",
"\t\tpreviousFractionIndex = 0;",
"\t\twhile ((fraction >= key[previousFractionIndex+1]) && (previousFractionIndex < blockSize))",
"\t\t{",
"\t\t\tpreviousFractionIndex++;",
"\t\t}",
"\t\ttracePrint ('reset/reincrement previousFractionIndex to' + previousFractionIndex);",
"\t}",
"",
"\tif (fraction == 1) // use final block",
"\t{",
"\t\ttracePrint ('(fraction == 1)');",
"\t\tfor (index = 0; index < blockSize; index++)",
"\t\t{",
"\t\t\t// update outputArray with final four keyValues",
"\t\t\toutputArray[4 - index] = keyValue[keyValue.length - index];",
"\t\t}",
"\t\tpreviousFractionIndex = -1; // setup for restart",
"\t\ttracePrint ('finished final fraction==1 block');",
"\t}",
"\t// when fraction matches index, calculate value_changed from corresponding keyValue array",
"\telse if (fraction == key[previousFractionIndex])",
"\t{",
"\t\ttracePrint ('(fraction == key[previousFractionIndex])');",
"\t\tfor (index = 0; index < blockSize; index++)",
"\t\t{",
"\t\t\t// update outputArray - need to interpolate next",
"\t\t\toutputArray[index] = keyValue[blockSize * (previousFractionIndex) + index];",
"\t\t}",
"\t}",
"\telse // calculate value_changed by interpolating between adjacent keyValue arrays",
"\t{",
"\t\tpartialFraction = fraction                     - key[previousFractionIndex];",
"\t\tdeltaFraction   = key[previousFractionIndex+1] - key[previousFractionIndex];",
"\t\tpercentFraction = partialFraction / deltaFraction;",
"\t//\ttracePrint ('deltaFraction   =' + deltaFraction);",
"\t//\ttracePrint ('partialFraction =' + partialFraction);",
"\t\ttracePrint ('percentFraction =' + percentFraction);",
"\t\tfor (index = 0; index < blockSize; index++)",
"\t\t{",
"\t\t\t// no arithmetic operators provided for SFVec2f, treat element by element",
"\t\t\tnextKeyValue  = keyValue[blockSize * (previousFractionIndex + 1) + index];",
"\t\t\tpriorKeyValue = keyValue[blockSize * (previousFractionIndex)     + index];",
"\t\t\tdeltaKeyValue = new SFVec2f (",
"\t\t\t\t\t\tnextKeyValue[0] - priorKeyValue[0],",
"\t\t\t\t\t\tnextKeyValue[1] - priorKeyValue[1]);",
"\t\t//\ttracePrint ('deltaKeyValue =' + deltaKeyValue);",
"\t\t\t// update outputArray",
"\t\t\toutputArray[index][0] = keyValue[blockSize * (previousFractionIndex) + index][0]",
"\t\t\t   + percentFraction * deltaKeyValue[0];",
"\t\t\toutputArray[index][1] = keyValue[blockSize * (previousFractionIndex) + index][1]",
"\t\t\t   + percentFraction * deltaKeyValue[1];",
"\t\t}",
"\t}",
"\tvalue_changed = outputArray;",
"\tpreviousFraction = fraction;",
"\ttracePrint ('value_changed=' + value_changed);",
"}",
"",
"function set_key (inputArray, timestamp) {",
"\tkey = inputArray;       // update key Vector2FloatArray",
"\tkeyHolderNode.key = key; // update holder",
"\tinitialize (timestamp); // reverify key, keyValue sizes",
"\tkey_changed = key;\t// eventOut",
"}",
"",
"function set_keyValue (inputArray, timestamp) {",
"\tkeyValue = inputArray;  \t// update keyValue Vector2FloatArray",
"\tkeyValueHolderNode.point = keyValue; // update holder",
"\tinitialize (timestamp); \t// reverify key, keyValue sizes",
"\tkeyValue_changed = keyValue;\t// eventOut",
"}"
]
                            }
                          }
                        ]
                      }
                    }
                  ]
              }
            }
          },
          {
            "#comment":"======================================"
          },
          {
            "#comment":"Example use"
          },
          { "Anchor":
            {
              "@description":"CoordinateInterpolator2dExample",
              "@parameter":["target=_blank"],
              "@url":["CoordinateInterpolator2dExample.x3d","https://savage.nps.edu/Savage/Tools/Animation/CoordinateInterpolator2dExample.x3d","CoordinateInterpolator2dExample.wrl","https://savage.nps.edu/Savage/Tools/Animation/CoordinateInterpolator2dExample.wrl"],
              "-children":[
                { "Shape":
                  {
                    "-geometry":
                      { "Text":
                        {
                          "@string":["CoordinateInterpolator2dPrototype","defines a prototype","","Click on this text to see","CoordinateInterpolator2dExample"," scene"],
                          "-fontStyle":
                            { "FontStyle":
                              {
                                "@justify":["MIDDLE","MIDDLE"],
                                "@size":0.7
                              }
                            }
                        }
                      },
                    "-appearance":
                      { "Appearance":
                        {
                          "-material":
                            { "Material":
                              {
                                "@diffuseColor":[1,1,0.2]
                              }
                            }
                        }
                      }
                  }
                }
              ]
            }
          }
        ]
    }
  }
}