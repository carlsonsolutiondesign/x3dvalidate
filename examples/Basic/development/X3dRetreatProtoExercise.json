{ "X3D": {
    "encoding":"UTF-8",
    "@profile":"Immersive",
    "@version":"3.0",
    "@xsd:noNamespaceSchemaLocation":"http://www.web3d.org/specifications/x3d-3.0.xsd",
    "JSON schema":"http://www.web3d.org/specifications/x3d-3.3-JSONSchema.json",
    "head": {
        "meta": [
          {
            "@name":"title",
            "@content":"X3DRetreatProtoExercise.x3d"
          },
          {
            "@name":"creator",
            "@content":"Don Brutzman"
          },
          {
            "@name":"created",
            "@content":"25 May 2000"
          },
          {
            "@name":"modified",
            "@content":"13 January 2014"
          },
          {
            "@name":"error",
            "@content":"Contains multiple intentional warnings and errors, for validation testing purposes."
          },
          {
            "@name":"description",
            "@content":"Solutions to the Proto Exercise posed by Chris Marrin of SONY at the May 2000 X3D Retreat. This exercise includes intentionally illegal VRML and does not render."
          },
          {
            "@name":"reference",
            "@content":"http://www.web3d.org/x3d/sony/X3DRetreatProtoEx.html"
          },
          {
            "@name":"identifier",
            "@content":"http://www.web3d.org/x3d/content/examples/development/X3DRetreatProtoExercise.x3d"
          },
          {
            "@name":"generator",
            "@content":"X3D-Edit 3.1, http://www.web3d.org/x3d/content/README.X3D-Edit.html"
          },
          {
            "@name":"license",
            "@content":"../license.html"
          },
          {
            "@name":"translated",
            "@content":"19 March 2017"
          },
          {
            "@name":"generator",
            "@content":"X3dToJson.xslt, http://www.web3d.org/x3d/stylesheets/X3dToJson.html"
          },
          {
            "@name":"warning",
            "@content":"An experimental version of X3D JSON encoding is used for this scene.  Status online at http://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
          }
        ]
    },
    "Scene": {
        "-children":[
          {
            "#comment":"============= Example 1 ============="
          },
          {
            "#comment":"GeometryNode and ChildNode are not valid node types, so used type Node/Nodes instead."
          },
          {
            "#comment":"Note exercise example is incomplete and has no node(s) defined for body content."
          },
          {
            "#comment":"X3D DTD can correctly detect these content errors if they occur, scene will be well-formed but not valid."
          },
          { "ProtoDeclare":
            {
              "@name":"MyProto",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"geometry",
                      "@accessType":"initializeOnly",
                      "@type":"SFNode",
                      "@value":"NULL"
                    },
                    {
                      "@name":"children",
                      "@accessType":"initializeOnly",
                      "@type":"MFNode",
                      "@value":"NULL"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "WorldInfo":
                      {
                        "@info":["Added this node as PROTO body, so that the example can be valid VRML"]
                      }
                    }
                  ]
              }
            }
          },
          {
            "#comment":"============= Example 2 ============="
          },
          {
            "#comment":"Adding new fields to an existing node."
          },
          {
            "#comment":"Corrected example by moving Material from PROTO interface to PROTO body."
          },
          { "ProtoDeclare":
            {
              "@name":"PhysicalMaterial",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"mass",
                      "@accessType":"inputOutput",
                      "@type":"SFFloat",
                      "@value":1
                    },
                    {
                      "@name":"hardness",
                      "@accessType":"initializeOnly",
                      "@type":"SFFloat",
                      "@value":1
                    },
                    {
                      "@name":"friction",
                      "@accessType":"initializeOnly",
                      "@type":"SFFloat",
                      "@value":1
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Material":
                      {
                        "@DEF":"M"
                      }
                    },
                    {
                      "#comment":"EXPORT M (this is Blendo nomenclature, not VRML 97)"
                    }
                  ]
              }
            }
          },
          {
            "#comment":"============= Example 3a ============="
          },
          {
            "#comment":"Consider new possibility of declaring a field PROTO."
          },
          {
            "#comment":"Again no body provided in this example (since goal is a new FieldPROTO construct)."
          },
          { "ProtoDeclare":
            {
              "@name":"Plane",
              "ProtoInterface": {
                  "-children":[
                    {
                      "#comment":"FIELDPROTO"
                    }
                  ],
                  "field": [
                    {
                      "@name":"normal",
                      "@accessType":"initializeOnly",
                      "@type":"SFVec3f",
                      "@value":[0,0,1]
                    },
                    {
                      "@name":"distance",
                      "@accessType":"initializeOnly",
                      "@type":"SFFloat",
                      "@value":0
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "WorldInfo":
                      {
                        "@info":["Added this node as PROTO body, so that the example can be valid VRML"]
                      }
                    }
                  ]
              }
            }
          },
          {
            "#comment":"============= Example 3b ============="
          },
          {
            "#comment":"Example 3b employs the supposed field PROTO."
          },
          {
            "#comment":"X3D DTD currently restricts field types to VRML 97 types, and so flags these untyped fields as an error."
          },
          {
            "#comment":"We could allow unspecified field types, but would lose checking (and authoring suggestions) on existing types."
          },
          { "ProtoDeclare":
            {
              "@name":"BSPLeaf",
              "ProtoInterface": {
                  "-children":[
                    {
                      "#comment":"Intentionally invalid type values used."
                    }
                  ],
                  "field": [
                    {
                      "@name":"plane",
                      "@accessType":"initializeOnly",
                      "@type":"Plane",
                      "@value":[0,0,1,0]
                    },
                    {
                      "@name":"front",
                      "@accessType":"initializeOnly",
                      "@type":"BSPLeaf",
                      "@value":"NULL"
                    },
                    {
                      "@name":"back",
                      "@accessType":"initializeOnly",
                      "@type":"BSPLeaf",
                      "@value":"NULL"
                    },
                    {
                      "@name":"children",
                      "@accessType":"initializeOnly",
                      "@type":"MFNode",
                      "@value":"NULL"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "WorldInfo":
                      {
                        "@info":["Added this node as PROTO body, so that the example can be valid VRML"]
                      }
                    }
                  ]
              }
            }
          },
          {
            "#comment":"============= Example 4 ============="
          },
          {
            "#comment":"PROTO with routes. Example nodes moved from interface definition to body."
          },
          { "ProtoDeclare":
            {
              "@name":"SpinGroup",
              "ProtoInterface": {
                  "-children":[
                    {
                      "#comment":"Example 4 calls three of the field references ROUTEs, but they actually match VRML 97 'IS' statements. IS=\"TS.cycleInterval\" IS=\"TS.startTime\" IS=\"TS.stopTime\""
                    }
                  ],
                  "field": [
                    {
                      "@name":"speed",
                      "@accessType":"initializeOnly",
                      "@type":"SFTime",
                      "@value":1
                    },
                    {
                      "@name":"startTime",
                      "@accessType":"initializeOnly",
                      "@type":"SFTime",
                      "@value":0
                    },
                    {
                      "@name":"stopTime",
                      "@accessType":"initializeOnly",
                      "@type":"SFTime",
                      "@value":0
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    {
                      "#comment":"Corrected example by moving nodes T, G, TS and OI from PROTO interface to PROTO body."
                    },
                    { "Transform":
                      {
                        "@DEF":"T",
                        "-children":[
                          {
                            "#comment":"EXPORT G (this is Blendo nomenclature, not VRML 97)"
                          },
                          { "Group":
                            {
                              "@DEF":"G"
                            }
                          }
                        ]
                      }
                    },
                    { "TimeSensor":
                      {
                        "@DEF":"TS",
                        "@loop":true
                      }
                    },
                    { "OrientationInterpolator":
                      {
                        "@DEF":"OI",
                        "@key":[0,0.25,0.5,0.75,1],
                        "@keyValue":[0,1,0,0,0,1,0,1.57,0,1,0,3.14,0,1,0,4.71,0,1,0,0]
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromField":"fraction_changed",
                        "@fromNode":"TS",
                        "@toField":"set_fraction",
                        "@toNode":"OI"
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromField":"value_changed",
                        "@fromNode":"OI",
                        "@toField":"set_rotation",
                        "@toNode":"T"
                      }
                    }
                  ]
              }
            }
          },
          {
            "#comment":"============= Example 5 ============="
          },
          {
            "#comment":"Show \"overriding of a method of the inherited interface.\""
          },
          {
            "#comment":"X3D DTD currently restricts field types to VRML 97 types, other values can be entered but are flagged as invalid. IS=\"RENDERscript.plane\" IS=\"RENDERscript.front\" IS=\"RENDERscript.back\""
          },
          { "ProtoDeclare":
            {
              "@name":"BSPLeaf",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"plane",
                      "@accessType":"initializeOnly",
                      "@type":"Plane",
                      "@value":[0,0,1,0]
                    },
                    {
                      "@name":"front",
                      "@accessType":"initializeOnly",
                      "@type":"BSPLeaf",
                      "@value":"NULL"
                    },
                    {
                      "@name":"back",
                      "@accessType":"initializeOnly",
                      "@type":"BSPLeaf",
                      "@value":"NULL"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    {
                      "#comment":"Here is a curious example problem: an unattached function overriding an unspecified (but commonly occuring) implementation-specific browser function."
                    },
                    {
                      "#comment":"This solution wraps a Script node around the render () function to maintain VRML 97 semantics."
                    },
                    {
                      "#comment":"Preprocessing can automate this process of wrapping a Script node around inline functions."
                    },
                    {
                      "#comment":"Corrected example by moving Group G (renamed GG) from PROTO interface to PROTO body."
                    },
                    { "Group":
                      {
                        "@DEF":"GG"
                      }
                    },
                    { "Script":
                      {
                        "@DEF":"RENDERscript",
                        "#sourceText":[
"ecmascript:",
"function render()",
"{",
" var result = plane.onPlane(System.sceneManager.getCameraPos());",
" if (result < 0) {",
"  front.render();",
"  G.render();",
"  back.render();",
" }",
" else if (result > 0) {",
"  back.render();",
"  G.render();",
"  front.render();",
" }",
" else {",
"  front.render();",
"  back.render();",
" }",
"}"
]
                      }
                    }
                  ]
              }
            }
          },
          {
            "#comment":"============= Example 6 ============="
          },
          {
            "#comment":"Show \"inclusion of field scripts which execute whenever the field receives an event.\""
          },
          { "ProtoDeclare":
            {
              "@name":"AnimatedMaterial",
              "ProtoInterface": {
                  "-children":[
                    {
                      "#comment":"FROM is Blendo nomenclature, expressed using IS references. IS=\"timeBase.startTime\" IS=\"timeBase.stopTime\""
                    },
                    {
                      "#comment":"During the December 3 1999 x3d-contributors meeting, Chris showed how"
                    },
                    {
                      "#comment":"the VRML 97 specification allows an SF/MFNode field node to be initialized with node content."
                    },
                    {
                      "#comment":"This construct is now permitted by DTD, here is an example:"
                    }
                  ],
                  "field": [
                    {
                      "@name":"startTime",
                      "@accessType":"initializeOnly",
                      "@type":"SFTime",
                      "@value":0
                    },
                    {
                      "@name":"stopTime",
                      "@accessType":"initializeOnly",
                      "@type":"SFTime",
                      "@value":0
                    },
                    {
                      "@name":"startColor",
                      "@accessType":"initializeOnly",
                      "@type":"SFColor",
                      "@value":[0,0,0]
                    },
                    {
                      "@name":"endColor",
                      "@accessType":"initializeOnly",
                      "@type":"SFColor",
                      "@value":[0,0,0]
                    },
                    {
                      "@name":"initializedChildren",
                      "@accessType":"initializeOnly",
                      "@type":"MFNode",
                      "-children":[
                        { "Group":
                          {
                            "@bboxCenter":[1,2,3]
                          }
                        },
                        { "Transform":
                          {
                            "@translation":[1,2,3]
                          }
                        }
                      ]
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    {
                      "#comment":"Moved the following content nodes from PROTO interface to PROTO body in order to match valid VRML 97 content."
                    },
                    { "Material":
                      {
                        "@DEF":"MM"
                      }
                    },
                    { "ProtoInstance":
                      {
                        "@name":"IntervalSensor",
                        "fieldValue": [
                          {
                            "@name":"timeBase",
                            "-children":[
                              { "ProtoInstance":
                                {
                                  "@name":"TimeBase",
                                  "@DEF":"timeBase"
                                }
                              }
                            ]
                          }
                        ]
                      }
                    },
                    { "ColorInterpolator":
                      {
                        "@DEF":"CI",
                        "@key":[0,0.5,1]
                      }
                    },
                    { "Script":
                      {
                        "@DEF":"AnimatedMaterialInitialize",
                        "#sourceText":[
"ecmascript:",
"{ // simple exercise for reader to initialize/update PROTO field values",
"  // to the MM Material node.  Be sure to add some IS statements to match.",
"}"
]
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromField":"value_changed",
                        "@fromNode":"CI",
                        "@toField":"set_diffuseColor",
                        "@toNode":"MM"
                      }
                    }
                  ]
              }
            }
          }
        ]
    }
  }
}